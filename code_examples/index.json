{
  "codeExamples": [
    {
      "title": "ADC background scan source",
      "name": "ADC_Background_Scan_1_KIT_TC275_LK",
      "description": "The Background Scan mode of the Analog-to-Digital Converter (ADC) module is configured to measure the\r\nanalog signals applied to the channels 4 to 7 of the group 4.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using background scan request.",
      "folder": "ADC_Background_Scan_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "background scan",
        "conversion",
        "VADC",
        "ADC_Background_Scan_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Background_Scan_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC background scan source",
      "name": "ADC_Background_Scan_1_KIT_TC297_TFT",
      "description": "The Background Scan mode of the Analog-to-Digital Converter (ADC) module is configured to measure the\r\nanalog signals applied to the channels 0 to 3 of the group 0.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using background scan request.",
      "folder": "ADC_Background_Scan_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "background scan",
        "conversion",
        "VADC",
        "ADC_Background_Scan_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Background_Scan_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "ADC filtering",
      "name": "ADC_Filtering_1_KIT_TC275_LK",
      "description": "The Versatile Analog-to-Digital Converter (VADC) module is configured to convert four channels in\r\nbackground scan mode. The data resulting from the conversions of three channels is automatically\r\nmodified: one channel computes an average on 4 results, another channel applies a 3rd order\r\nFinite Impulse Response (FIR) filter and another channel applies a 1st order\r\nInfinite Impulse Response (IIR) filter. Finally, the last channel measures the same signal without\r\nData Modification. The channels are continuously converted and, for each of them, the maximum\r\nand minimum values are stored, which are then sent through UART in order to be compared.",
      "abstract": "Four VADC channels are used to convert the same analog signal with different filters enabled.",
      "folder": "ADC_Filtering_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Filtering_1",
        "AURIX",
        "Average",
        "DMM",
        "DRCTR",
        "Difference Mode",
        "FIR",
        "Filter",
        "IIR",
        "Result Filtering Mode",
        "Standard Data Reduction Mode",
        "Subtraction",
        "VADC"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Filtering_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC filtering",
      "name": "ADC_Filtering_1_KIT_TC297_TFT",
      "description": "The Versatile Analog-to-Digital Converter (VADC) module is configured to convert four channels in\r\nbackground scan mode. The data resulting from the conversions of three channels is automatically\r\nmodified: one channel computes an average on 4 results, another channel applies a 3rd order\r\nFinite Impulse Response (FIR) filter and another channel applies a 1st order\r\nInfinite Impulse Response (IIR) filter. Finally, the last channel measures the same signal without\r\nData Modification. The channels are continuously converted and, for each of them, the maximum\r\nand minimum values are stored, which are then sent through UART in order to be compared.",
      "abstract": "Four VADC channels are used to convert the same analog signal with different filters enabled.",
      "folder": "ADC_Filtering_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Filtering_1",
        "AURIX",
        "Average",
        "DMM",
        "DRCTR",
        "Difference Mode",
        "FIR",
        "Filter",
        "IIR",
        "Result Filtering Mode",
        "Standard Data Reduction Mode",
        "Subtraction",
        "VADC"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Filtering_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "ADC filtering",
      "name": "ADC_Filtering_1_KIT_TC334_LK",
      "description": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) module is configured to convert four\r\nchannels. The data resulting from the conversions of three channels is automatically modified: one\r\nchannel computes an average on 4 results, another channel applies a 3rd order Finite Impulse\r\nResponse (FIR) filter and another channel applies a 1st order Infinite Impulse Response (IIR) filter.\r\nFinally, the last channel measures the same signal without Data Modification.\r\nThe channels are continuously converted and, for each of them, the maximum and minimum\r\nvalues are stored, which are then sent through UART in order to be compared.",
      "abstract": "Four EVADC channels are used to convert the same analog signal with different filters enabled.",
      "folder": "ADC_Filtering_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Filtering_1",
        "AURIX",
        "Average",
        "DMM",
        "DRCTR",
        "Difference Mode",
        "FIR",
        "Filter",
        "IIR",
        "Result Filtering Mode",
        "Standard Data Reduction Mode",
        "Subtraction",
        "EVADC"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Filtering_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "ADC filtering",
      "name": "ADC_Filtering_1_KIT_TC375_LK",
      "description": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) module is configured to convert four\r\nchannels. The data resulting from the conversions of three channels is automatically modified: one\r\nchannel computes an average on 4 results, another channel applies a 3rd order Finite Impulse\r\nResponse (FIR) filter and another channel applies a 1st order Infinite Impulse Response (IIR) filter.\r\nFinally, the last channel measures the same signal without Data Modification.\r\nThe channels are continuously converted and, for each of them, the maximum and minimum\r\nvalues are stored, which are then sent through UART in order to be compared.",
      "abstract": "Four EVADC channels are used to convert the same analog signal with different filters enabled.",
      "folder": "ADC_Filtering_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Filtering_1",
        "AURIX",
        "Average",
        "DMM",
        "DRCTR",
        "Difference Mode",
        "FIR",
        "Filter",
        "IIR",
        "Result Filtering Mode",
        "Standard Data Reduction Mode",
        "Subtraction",
        "EVADC"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Filtering_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "ADC filtering",
      "name": "ADC_Filtering_1_KIT_TC397_TFT",
      "description": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) module is configured to convert four\r\nchannels. The data resulting from the conversions of three channels is automatically modified: one\r\nchannel computes an average on 4 results, another channel applies a 3rd order Finite Impulse\r\nResponse (FIR) filter and another channel applies a 1st order Infinite Impulse Response (IIR) filter.\r\nFinally, the last channel measures the same signal without Data Modification.\r\nThe channels are continuously converted and, for each of them, the maximum and minimum\r\nvalues are stored, which are then sent through UART in order to be compared.",
      "abstract": "Four EVADC channels are used to convert the same analog signal with different filters enabled.",
      "folder": "ADC_Filtering_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Filtering_1",
        "AURIX",
        "Average",
        "DMM",
        "DRCTR",
        "Difference Mode",
        "FIR",
        "Filter",
        "IIR",
        "Result Filtering Mode",
        "Standard Data Reduction Mode",
        "Subtraction",
        "EVADC"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Filtering_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Auto Scan of ADC channel",
      "name": "ADC_Group_Scan_1_KIT_TC275_LK",
      "description": "The Auto Scan mode of the Versatile Analog to Digital Converter (VADC) module is enabled over the\r\nchannels 0 to 4 of the Group 0. Additionally, the converted results are checked with the\r\nValid Flag (VF) of the Result Register, and then sent to the PC via UART.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using  scan request.",
      "folder": "ADC_Group_Scan_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Group_Scan_1",
        "AURIX",
        "VADC",
        "auto scan",
        "conversion"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Group_Scan_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Auto Scan of ADC channel",
      "name": "ADC_Group_Scan_1_KIT_TC297_TFT",
      "description": "The Auto Scan mode of the Versatile Analog to Digital Converter (VADC) module is enabled over the\r\nchannels 0 to 4 of the Group 0. Additionally, the converted results are checked with the\r\nValid Flag (VF) of the Result Register, and then sent to the PC via UART.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using  scan request.",
      "folder": "ADC_Group_Scan_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Group_Scan_1",
        "AURIX",
        "VADC",
        "auto scan",
        "conversion"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Group_Scan_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC queued source",
      "name": "ADC_Queued_Scan_1_KIT_TC275_LK",
      "description": "The Queued Request of the Versatile Analog-to-Digital Converter (VADC) module is used to continuously\r\nscan the analog inputs channels 5, 6 and 7 of group 4.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using queued request.",
      "folder": "ADC_Queued_Scan_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "queued",
        "conversion",
        "VADC",
        "ADC_Queued_Scan_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Queued_Scan_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC queued source",
      "name": "ADC_Queued_Scan_1_KIT_TC297_TFT",
      "description": "The Queued Request of the Versatile Analog-to-Digital Converter (VADC) module is used to continuously\r\nscan the analog inputs channels 1, 4 and 5 of group 2.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure multiple analog signals in a sequence using queued request.",
      "folder": "ADC_Queued_Scan_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "queued",
        "conversion",
        "VADC",
        "ADC_Queued_Scan_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Queued_Scan_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "ADC queued source",
      "name": "ADC_Queued_Scan_1_KIT_TC334_LK",
      "description": "The Queued Request of the Enhanced Versatile Analog-to-Digital Converter (EVADC) module is used to\r\ncontinuously scan the analog inputs channels 7, 6 and 5 of group 8.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure multiple analog signals in a sequence using queued request.",
      "folder": "ADC_Queued_Scan_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "queued",
        "conversion",
        "EVADC",
        "AURIX",
        "ADC_Queued_Scan_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Queued_Scan_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "ADC queued source",
      "name": "ADC_Queued_Scan_1_KIT_TC375_LK",
      "description": "The Queued Request of the Enhanced Versatile Analog-to-Digital Converter (EVADC) module is used to\r\ncontinuously scan the analog inputs channels 7, 6 and 5 of group 8.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure multiple analog signals in a sequence using queued request.",
      "folder": "ADC_Queued_Scan_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "queued",
        "conversion",
        "EVADC",
        "AURIX",
        "ADC_Queued_Scan_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Queued_Scan_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "ADC queued source",
      "name": "ADC_Queued_Scan_1_KIT_TC397_TFT",
      "description": "The Queued Request of the Enhanced Versatile Analog-to-Digital Converter (EVADC) module is used to\r\ncontinuously scan the analog inputs channels 1, 4 and 5 of group 2.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure multiple analog signals in a sequence using queued request.",
      "folder": "ADC_Queued_Scan_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "queued",
        "conversion",
        "EVADC",
        "AURIX",
        "ADC_Queued_Scan_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Queued_Scan_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "ADC single channel conversion",
      "name": "ADC_Single_Channel_1_KIT_TC275_LK",
      "description": "An analog input channel is continuously converted using the background scan mode.\r\nThe input value is determined by the potentiometer on the board.\r\nTwo LEDs are used to indicate a voltage interval.\r\nThus depending on the conversion value, one or both LEDs are on.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure an analog signal using background scan request.",
      "folder": "ADC_Single_Channel_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Single_Channel_1",
        "VADC",
        "conversion",
        "single channel scan"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Single_Channel_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC single channel conversion",
      "name": "ADC_Single_Channel_1_KIT_TC297_TFT",
      "description": "An analog input channel is continuously converted using the background scan mode. The input value\r\nis determined using the microcontroller\u0027s supply voltage, ground level or letting the analog pin open\r\nand floating. Three LEDs are used, each indicating a voltage interval. Thus depending on the conversion\r\nvalue, a certain LED will light up.",
      "abstract": "The Versatile Analog-to-Digital Converter (VADC) is configured to measure an analog signal using background scan request.",
      "folder": "ADC_Single_Channel_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Single_Channel_1",
        "VADC",
        "conversion",
        "single channel scan"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Single_Channel_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "ADC single channel conversion",
      "name": "ADC_Single_Channel_1_KIT_TC334_LK",
      "description": "An analog input channel is continuously converted using the queued mode.\r\nThe input value is determined by the potentiometer on the board.\r\nTwo LEDs are used to indicate a voltage interval. Thus depending on the conversion\r\nvalue, one or both LEDs are on.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure an analog signal using queued request.",
      "folder": "ADC_Single_Channel_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Single_Channel_1",
        "EVADC",
        "conversion",
        "single channel scan",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Single_Channel_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "ADC single channel conversion",
      "name": "ADC_Single_Channel_1_KIT_TC375_LK",
      "description": "An analog input channel is continuously converted using the queued mode.\r\nThe input value is determined by the potentiometer on the board.\r\nTwo LEDs are used to indicate a voltage interval. Thus depending on the conversion\r\nvalue, one or both LEDs are on.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure an analog signal using queued request.",
      "folder": "ADC_Single_Channel_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Single_Channel_1",
        "EVADC",
        "conversion",
        "single channel scan",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Single_Channel_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "ADC single channel conversion",
      "name": "ADC_Single_Channel_1_KIT_TC397_TFT",
      "description": "An analog input channel is continuously converted using the queued mode.\r\nThe input value is determined using the microcontroller�s supply voltage, ground level or letting\r\nthe analog pin open and floating. Three LEDs are used, each indicating a voltage interval.\r\nThus depending on the conversion value, a certain LED will light up.",
      "abstract": "The Enhanced Versatile Analog-to-Digital Converter (EVADC) is configured to measure an analog signal using queued request.",
      "folder": "ADC_Single_Channel_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "ADC_Single_Channel_1",
        "EVADC",
        "conversion",
        "single channel scan",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ADC_Single_Channel_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "LIN master communication via ASCLIN module",
      "name": "ASCLIN_LIN_Master_1_KIT_TC275_LK",
      "description": "The string \"Hello World!\" is sent via an ASCLIN module configured as\r\nLIN master. The signal can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module is configured as LIN master to send \"Hello World!\"",
      "folder": "ASCLIN_LIN_Master_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_LIN_Master_1",
        "AURIX",
        "LIN",
        "Oscilloscope",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_LIN_Master_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "LIN master communication via ASCLIN module",
      "name": "ASCLIN_LIN_Master_1_KIT_TC297_TFT",
      "description": "The string \"Hello World!\" is sent via an ASCLIN module configured as\r\nLIN master. The signal can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module is configured as LIN master to send \"Hello World!\"",
      "folder": "ASCLIN_LIN_Master_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_LIN_Master_1",
        "AURIX",
        "LIN",
        "Oscilloscope",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_LIN_Master_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "LIN master communication via ASCLIN module",
      "name": "ASCLIN_LIN_Master_1_KIT_TC334_LK",
      "description": "The string \"Hello World!\" is sent via an ASCLIN module configured as LIN master.\r\nThe signal can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module is configured as LIN master to send \"Hello World!\"",
      "folder": "ASCLIN_LIN_Master_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_LIN_Master_1",
        "AURIX",
        "LIN",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_LIN_Master_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "LIN master communication via ASCLIN module",
      "name": "ASCLIN_LIN_Master_1_KIT_TC375_LK",
      "description": "The string \"Hello World!\" is sent via an ASCLIN module configured as LIN master.\r\nThe signal can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module is configured as LIN master to send \"Hello World!\"",
      "folder": "ASCLIN_LIN_Master_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_LIN_Master_1",
        "AURIX",
        "LIN",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_LIN_Master_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "LIN master communication via ASCLIN module",
      "name": "ASCLIN_LIN_Master_1_KIT_TC397_TFT",
      "description": "The string \"Hello World!\" is sent via an ASCLIN module configured as\r\nLIN master. The signal can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module is configured as LIN master to send \"Hello World!\"",
      "folder": "ASCLIN_LIN_Master_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_LIN_Master_1",
        "AURIX",
        "LIN",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_LIN_Master_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC237_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC237_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC237_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC237_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC275_LK",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC275_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC275_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC275_SB",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC275_SB",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC275_SB-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC277_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC277_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC277_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC297_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC334_LK",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC367_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC367_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC367_5V_TFT",
          "device_id": "TC36xDP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC367_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC36A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC375_LK",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC375_SB",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC375_SB",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC375_SB-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC377_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC377_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC377_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC387_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC387_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC387_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Shell via UART communication",
      "name": "ASCLIN_Shell_UART_1_KIT_TC397_TFT",
      "description": "The ASCLIN module is configured for UART communication.\r\nThe Shell from iLLDs exploits the ASCLIN module to interpret and manage commands from the\r\nuser like \"info\", \"toggle [x]\" or \"help\".",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. The ASCLIN module is used to interface with the Shell through the USB port via UART.",
      "folder": "ASCLIN_Shell_UART_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN_Shell_UART_1",
        "AURIX",
        "UART",
        "VCOM",
        "serial communication",
        "shell"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_Shell_UART_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "SPI master communication via ASCLIN module",
      "name": "ASCLIN_SPI_Master_1_KIT_TC275_LK",
      "description": "The two bytes message is sent through MTSR (MOSI) port pin P15.4 in loopback mode.\r\nThis signal can be visualized on the oscilloscope screen.",
      "abstract": "An ASCLIN module configured as SPI master sends a two bytes message.",
      "folder": "ASCLIN_SPI_Master_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_SPI_Master_1",
        "AURIX",
        "Oscilloscope",
        "SPI",
        "communication",
        "master"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_SPI_Master_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI master communication via ASCLIN module",
      "name": "ASCLIN_SPI_Master_1_KIT_TC297_TFT",
      "description": "The two bytes message is sent through MTSR (MOSI) port pin P15.4 in loopback mode.\r\nThis signal can be visualized on the oscilloscope screen.",
      "abstract": "An ASCLIN module configured as SPI master sends a two bytes message.",
      "folder": "ASCLIN_SPI_Master_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_SPI_Master_1",
        "AURIX",
        "Oscilloscope",
        "SPI",
        "communication",
        "master"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_SPI_Master_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "SPI master communication via ASCLIN module",
      "name": "ASCLIN_SPI_Master_1_KIT_TC334_LK",
      "description": "The two bytes message is sent through MTSR (MOSI) port pin P15.4 in loopback mode.\r\nThis signal can be visualized on the oscilloscope screen.",
      "abstract": "An ASCLIN module configured as SPI master sends a two bytes message.",
      "folder": "ASCLIN_SPI_Master_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_SPI_Master_1",
        "AURIX",
        "Oscilloscope",
        "SPI",
        "communication",
        "master"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_SPI_Master_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "SPI master communication via ASCLIN module",
      "name": "ASCLIN_SPI_Master_1_KIT_TC375_LK",
      "description": "The two bytes message is sent through MTSR (MOSI) port pin P15.4 in loopback mode.\r\nThis signal can be visualized on the oscilloscope screen.",
      "abstract": "An ASCLIN module configured as SPI master sends a two bytes message.",
      "folder": "ASCLIN_SPI_Master_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_SPI_Master_1",
        "AURIX",
        "Oscilloscope",
        "SPI",
        "communication",
        "master"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_SPI_Master_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "SPI master communication via ASCLIN module",
      "name": "ASCLIN_SPI_Master_1_KIT_TC397_TFT",
      "description": "The two bytes message is sent through MTSR (MOSI) port pin P15.4 in loopback mode.\r\nThis signal can be visualized on the oscilloscope screen.",
      "abstract": "An ASCLIN module configured as SPI master sends a two bytes message.",
      "folder": "ASCLIN_SPI_Master_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ASCLIN",
        "ASCLIN_SPI_Master_1",
        "AURIX",
        "Oscilloscope",
        "SPI",
        "communication",
        "master"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_SPI_Master_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "UART communication via ASCLIN module",
      "name": "ASCLIN_UART_1_KIT_TC275_LK",
      "description": "The string \"Hello World!\" is sent and received via UART through one pin due to the internal loopback.\r\nThe data can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module configured for UART communication sends \"Hello World!\" and receives the string via the internal loopback.",
      "folder": "ASCLIN_UART_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "ASCLIN_UART_1",
        "AURIX",
        "Oscilloscope",
        "UART",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_UART_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "UART communication via ASCLIN module",
      "name": "ASCLIN_UART_1_KIT_TC297_TFT",
      "description": "The string \"Hello World!\" is sent and received via UART through one pin due to the internal loopback.\r\nThe data can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module configured for UART communication sends \"Hello World!\" and receives the string via the internal loopback.",
      "folder": "ASCLIN_UART_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "ASCLIN_UART_1",
        "AURIX",
        "Oscilloscope",
        "UART",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_UART_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "UART communication via ASCLIN module",
      "name": "ASCLIN_UART_1_KIT_TC334_LK",
      "description": "The string \"Hello World!\" is sent and received via UART through one pin due to the internal loopback.\r\nThe data can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module configured for UART communication sends \"Hello World!\" and receives the string via the internal loopback.",
      "folder": "ASCLIN_UART_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "ASCLIN_UART_1",
        "AURIX",
        "Oscilloscope",
        "UART",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_UART_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "UART communication via ASCLIN module",
      "name": "ASCLIN_UART_1_KIT_TC375_LK",
      "description": "The string \"Hello World!\" is sent and received via UART through one pin due to the internal loopback.\r\nThe data can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module configured for UART communication sends \"Hello World!\" and receives the string via the internal loopback.",
      "folder": "ASCLIN_UART_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "ASCLIN_UART_1",
        "AURIX",
        "Oscilloscope",
        "UART",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_UART_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "UART communication via ASCLIN module",
      "name": "ASCLIN_UART_1_KIT_TC397_TFT",
      "description": "The string \"Hello World!\" is sent and received via UART through one pin due to the internal loopback.\r\nThe data can be visualized using an oscilloscope.",
      "abstract": "An ASCLIN module configured for UART communication sends \"Hello World!\" and receives the string via the internal loopback.",
      "folder": "ASCLIN_UART_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "ASCLIN_UART_1",
        "AURIX",
        "Oscilloscope",
        "UART",
        "communication"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ASCLIN_UART_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Assembly language in C code",
      "name": "Assembly_C_Code_1_KIT_TC275_LK",
      "description": "Two LEDs are switched on then switched off using assembly code functions.",
      "abstract": "Inline assembler and assembler files are used in combination in a C project.",
      "folder": "Assembly_C_Code_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "Assembly",
        "C",
        "AURIX",
        "Assembly_C_Code_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Assembly_C_Code_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Assembly language in C code",
      "name": "Assembly_C_Code_1_KIT_TC297_TFT",
      "description": "Two LEDs are switched on then switched off using assembly code functions.",
      "abstract": "Inline assembler and assembler files are used in combination in a C project.",
      "folder": "Assembly_C_Code_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "Assembly",
        "C",
        "AURIX",
        "Assembly_C_Code_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Assembly_C_Code_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Assembly language in C code",
      "name": "Assembly_C_Code_1_KIT_TC334_LK",
      "description": "Two LEDs are switched on then switched off using assembly code functions.",
      "abstract": "Inline assembler and assembler files are used in combination in a C project.",
      "folder": "Assembly_C_Code_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "Assembly",
        "C",
        "AURIX",
        "Assembly_C_Code_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Assembly_C_Code_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Assembly language in C code",
      "name": "Assembly_C_Code_1_KIT_TC375_LK",
      "description": "Two LEDs are switched on then switched off using assembly code functions.",
      "abstract": "Inline assembler and assembler files are used in combination in a C project.",
      "folder": "Assembly_C_Code_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "Assembly",
        "C",
        "AURIX",
        "Assembly_C_Code_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Assembly_C_Code_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Assembly language in C code",
      "name": "Assembly_C_Code_1_KIT_TC397_TFT",
      "description": "Two LEDs are switched on then switched off using assembly code functions.",
      "abstract": "Inline assembler and assembler files are used in combination in a C project.",
      "folder": "Assembly_C_Code_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "Assembly",
        "C",
        "AURIX",
        "Assembly_C_Code_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Assembly_C_Code_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC234_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC234_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X4 V1.0",
          "id": "KIT_AURIX_TC234_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC234_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC237_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC237_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC237_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC237_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC265_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P33.8.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC265_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2x5 V2.0",
          "id": "KIT_AURIX_TC265_TFT_BC-Step",
          "device_id": "TC26xD_B-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC265_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC26B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC275_LK",
      "description": "A wait function is used to add delays between switching on and switching off an LED\r\non port pin P00.5.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC275_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Blinky_LED_1",
        "Blinky",
        "LED",
        "Lite"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC275_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC275_SB",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P10.2.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC275_SB",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC275_SB-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC277_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC277_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC277_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC297_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC334_LK",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P00.5",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "GPIO",
        "blinky",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC367_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC367_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC367_5V_TFT",
          "device_id": "TC36xDP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC367_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC36A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC375_LK",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P00.5",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "GPIO",
        "blinky",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC375_SB",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P10.2.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC375_SB",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC375_SB-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC377_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC377_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC377_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC387_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC387_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC387_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Blinky LED",
      "name": "Blinky_LED_1_KIT_TC397_TFT",
      "description": "A wait function is used to add delays between switching on and switching off an LED on port pin P13.0.",
      "abstract": "An LED is blinking based on the timing given by a wait function.",
      "folder": "Blinky_LED_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "LED",
        "blinky",
        "GPIO",
        "General Port Input Output",
        "AURIX",
        "Blinky_LED_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Blinky_LED_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Register Access Protection",
      "name": "BUS_Register_Protection_1_KIT_TC275_LK",
      "description": "The CPU0 tries to make a write access to an ASCLIN0 module register two times: when the access is\r\nenabled for CPU0 and when the access is disabled for CPU0. During the second register write access,\r\na Trap is expected to be raised, to inform about the illegal write access.",
      "abstract": "This example shows how to protect registers from unintended write access by using AURIX register access protection mechanisms.",
      "folder": "BUS_Register_Protection_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Access protection",
        "BUS_Register_Protection_1",
        "Registers"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_BUS_Register_Protection_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Register Access Protection",
      "name": "BUS_Register_Protection_1_KIT_TC297_TFT",
      "description": "The CPU0 tries to make a write access to an ASCLIN0 module register two times: when the access is\r\nenabled for CPU0 and when the access is disabled for CPU0. During the second register write access,\r\na Trap is expected to be raised, to inform about the illegal write access.",
      "abstract": "This example shows how to protect registers from unintended write access by using AURIX register access protection mechanisms.",
      "folder": "BUS_Register_Protection_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Access protection",
        "BUS_Register_Protection_1",
        "Registers"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_BUS_Register_Protection_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Register Access Protection",
      "name": "BUS_Register_Protection_1_KIT_TC334_LK",
      "description": "The CPU0 tries to make a write access to an ASCLIN0 module register two times: when the access is\r\nenabled for CPU0 and when the access is disabled for CPU0. During the second register write access,\r\na Trap is expected to be raised, to inform about the illegal write access.",
      "abstract": "This example shows how to protect registers from unintended write access by using AURIX register access protection mechanisms.",
      "folder": "BUS_Register_Protection_1_KIT_TC334_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Access protection",
        "BUS_Register_Protection_1",
        "Registers"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_BUS_Register_Protection_1_KIT_TC334_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Register Access Protection",
      "name": "BUS_Register_Protection_1_KIT_TC375_LK",
      "description": "The CPU0 tries to make a write access to an ASCLIN0 module register two times: when the access is\r\nenabled for CPU0 and when the access is disabled for CPU0. During the second register write access,\r\na Trap is expected to be raised, to inform about the illegal write access.",
      "abstract": "This example shows how to protect registers from unintended write access by using AURIX register access protection mechanisms.",
      "folder": "BUS_Register_Protection_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Access protection",
        "BUS_Register_Protection_1",
        "Registers"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_BUS_Register_Protection_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Register Access Protection",
      "name": "BUS_Register_Protection_1_KIT_TC397_TFT",
      "description": "The CPU0 tries to make a write access to an ASCLIN0 module register two times: when the access is\r\nenabled for CPU0 and when the access is disabled for CPU0. During the second register write access,\r\na Trap is expected to be raised, to inform about the illegal write access.",
      "abstract": "This example shows how to protect registers from unintended write access by using AURIX register access protection mechanisms.",
      "folder": "BUS_Register_Protection_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Access protection",
        "BUS_Register_Protection_1",
        "Registers"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_BUS_Register_Protection_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 ADC conversion triggering",
      "name": "CCU6_ADC_1_KIT_TC275_LK",
      "description": "The Timer T12 is defining the Analog-to-Digital Converter (ADC) sample rate. Due to the instability of\r\nthe signals (e.g. the overshoot period), a delay is introduced by Timer T13 after each period match of\r\nTimer T12. This ensures that the measurement is done when the signal is already stable. UART\r\ncommunication is used to display all measured values on a terminal monitor.",
      "abstract": "CCU6 timers T12 and T13 are used to trigger the Versatile Analog-to-Digital Converter (VADC).",
      "folder": "CCU6_ADC_1_KIT_TC275_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "CCU6",
        "CCU6_ADC_1",
        "VADC",
        "analog",
        "conversion",
        "digital",
        "measurement",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_ADC_1_KIT_TC275_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 ADC conversion triggering",
      "name": "CCU6_ADC_1_KIT_TC297_TFT",
      "description": "The Timer T12 is defining the Analog-to-Digital Converter (ADC) sample rate. Due to the instability of\r\nthe signals (e.g. the overshoot period), a delay is introduced by Timer T13 after each period match of\r\nTimer T12. This ensures that the measurement is done when the signal is already stable. UART\r\ncommunication is used to display all measured values on a terminal monitor.",
      "abstract": "CCU6 timers T12 and T13 are used to trigger the Versatile Analog-to-Digital Converter (VADC).",
      "folder": "CCU6_ADC_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "CCU6",
        "CCU6_ADC_1",
        "VADC",
        "analog",
        "conversion",
        "digital",
        "measurement",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_ADC_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 ADC conversion triggering",
      "name": "CCU6_ADC_1_KIT_TC334_LK",
      "description": "The Timer T12 is defining the Analog-to-Digital Converter (ADC) sample rate. Due to the instability of\r\nthe signals (e.g. the overshoot period), a delay is introduced by Timer T13 after each period match of\r\nTimer T12. This ensures that the measurement is done when the signal is already stable. UART\r\ncommunication is used to display all measured values on a terminal monitor.",
      "abstract": "CCU6 timers T12 and T13 are used to trigger the Enhanced Versatile Analog-to-Digital Converter (EVADC).",
      "folder": "CCU6_ADC_1_KIT_TC334_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "CCU6",
        "CCU6_ADC_1",
        "EVADC",
        "analog",
        "conversion",
        "digital",
        "measurement",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_ADC_1_KIT_TC334_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 ADC conversion triggering",
      "name": "CCU6_ADC_1_KIT_TC375_LK",
      "description": "The Timer T12 is defining the Analog-to-Digital Converter (ADC) sample rate. Due to the instability of\r\nthe signals (e.g. the overshoot period), a delay is introduced by Timer T13 after each period match of\r\nTimer T12. This ensures that the measurement is done when the signal is already stable. UART\r\ncommunication is used to display all measured values on a terminal monitor.",
      "abstract": "CCU6 timers T12 and T13 are used to trigger the Enhanced Versatile Analog-to-Digital Converter (EVADC).",
      "folder": "CCU6_ADC_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "CCU6",
        "CCU6_ADC_1",
        "EVADC",
        "analog",
        "conversion",
        "digital",
        "measurement",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_ADC_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 ADC conversion triggering",
      "name": "CCU6_ADC_1_KIT_TC397_TFT",
      "description": "The Timer T12 is defining the Analog-to-Digital Converter (ADC) sample rate. Due to the instability of\r\nthe signals (e.g. the overshoot period), a delay is introduced by Timer T13 after each period match of\r\nTimer T12. This ensures that the measurement is done when the signal is already stable. UART\r\ncommunication is used to display all measured values on a terminal monitor.",
      "abstract": "CCU6 timers T12 and T13 are used to trigger the Enhanced Versatile Analog-to-Digital Converter (EVADC).",
      "folder": "CCU6_ADC_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "CCU6",
        "CCU6_ADC_1",
        "EVADC",
        "analog",
        "conversion",
        "digital",
        "measurement",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_ADC_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "CCU6 interrupt generation",
      "name": "CCU6_Interrupt_1_KIT_TC275_LK",
      "description": "Timer T12 of the CCU6 unit generates an interrupt on a \"period match\" event every 500 ms.\r\nInside the ISR, a counter variable is incremented. The LEDs toggle based on the value of the counter:\r\n- LED1 on and LED2 off: counter % 2 \u003d\u003d 0\r\n- LED1 off and LED2 on: counter % 2 \u003d\u003d 1",
      "abstract": "The CCU6 unit generates an interrupt every 500 ms and increments a counter in its Interrupt Service Routine (ISR).",
      "folder": "CCU6_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_Interrupt_1",
        "Interrupt",
        "LED"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_Interrupt_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "CCU6 interrupt generation",
      "name": "CCU6_Interrupt_1_KIT_TC297_TFT",
      "description": "Timer T12 of the CCU6  unit generates an interrupt on a \"period match\" event every 500 ms.\r\nInside the ISR, a counter variable is incremented.\r\nLEDs toggles based on the value of the counter:\r\n- 1st LED: counter % 4 \u003d\u003d 0\r\n- 2nd LED: counter % 4 \u003d\u003d 1\r\n- 3rd LED: counter % 4 \u003d\u003d 2\r\n- 4th LED: counter % 4 \u003d\u003d 3",
      "abstract": "The CCU6 unit generates an interrupt every 500 ms and increments a counter in its Interrupt Service Routine (ISR).",
      "folder": "CCU6_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_Interrupt_1",
        "Interrupt",
        "LED"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_Interrupt_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "CCU6 interrupt generation",
      "name": "CCU6_Interrupt_1_KIT_TC334_LK",
      "description": "Timer T12 of the CCU6 unit generates an interrupt on a \"period match\" event every 500 ms.\r\nInside the ISR, a counter variable is incremented.\r\nThe LEDs toggle based on the value of the counter:\r\n- LED1 on and LED2 off: counter % 2 \u003d\u003d 0\r\n- LED1 off and LED2 on: counter % 2 \u003d\u003d 1",
      "abstract": "The CCU6 unit generates an interrupt every 500 ms and increments a counter in its Interrupt Service Routine (ISR).",
      "folder": "CCU6_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_Interrupt_1",
        "Interrupt",
        "LED"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "CCU6 interrupt generation",
      "name": "CCU6_Interrupt_1_KIT_TC375_LK",
      "description": "Timer T12 of the CCU6 unit generates an interrupt on a \"period match\" event every 500 ms.\r\nInside the ISR, a counter variable is incremented.\r\nThe LEDs toggle based on the value of the counter:\r\n- LED1 on and LED2 off: counter % 2 \u003d\u003d 0\r\n- LED1 off and LED2 on: counter % 2 \u003d\u003d 1",
      "abstract": "The CCU6 unit generates an interrupt every 500 ms and increments a counter in its Interrupt Service Routine (ISR).",
      "folder": "CCU6_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_Interrupt_1",
        "Interrupt",
        "LED"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_Interrupt_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "CCU6 interrupt generation",
      "name": "CCU6_Interrupt_1_KIT_TC397_TFT",
      "description": "Timer T12 of the CCU6  unit generates an interrupt on a \"period match\" event every 500 ms.\r\nInside the ISR, a counter variable is incremented.\r\nLEDs toggles based on the value of the counter:\r\n- 1st LED: counter % 4 \u003d\u003d 0\r\n- 2nd LED: counter % 4 \u003d\u003d 1\r\n- 3rd LED: counter % 4 \u003d\u003d 2\r\n- 4th LED: counter % 4 \u003d\u003d 3",
      "abstract": "The CCU6 unit generates an interrupt every 500 ms and increments a counter in its Interrupt Service Routine (ISR).",
      "folder": "CCU6_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_Interrupt_1",
        "Interrupt",
        "LED"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_Interrupt_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "CCU6 PWM signal capture",
      "name": "CCU6_PWM_Capture_1_KIT_TC275_LK",
      "description": "A simple PWM signal is generated by toggling a port pin. The resulting PWM frequency and duty cycle\r\nis measured by the Capture/Control Unit 6 (CCU6).",
      "abstract": "The CCU6 unit is used to capture an external PWM signal and calculate its frequency and duty cycle.",
      "folder": "CCU6_PWM_Capture_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Capture_1",
        "PWM",
        "signal capture",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Capture_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "CCU6 PWM signal capture",
      "name": "CCU6_PWM_Capture_1_KIT_TC297_TFT",
      "description": "A simple PWM signal is generated by toggling a port pin. The resulting PWM frequency and duty cycle\r\nis measured by the Capture/Control Unit 6 (CCU6).",
      "abstract": "The CCU6 unit is used to capture an external PWM signal and calculate its frequency and duty cycle.",
      "folder": "CCU6_PWM_Capture_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Capture_1",
        "PWM",
        "signal capture",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Capture_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "CCU6 PWM signal capture",
      "name": "CCU6_PWM_Capture_1_KIT_TC334_LK",
      "description": "A simple PWM signal is generated by toggling a port pin. The resulting PWM frequency and duty cycle\r\nis measured by the Capture/Control Unit 6 (CCU6).",
      "abstract": "The CCU6 unit is used to capture an external PWM signal and calculate its frequency and duty cycle.",
      "folder": "CCU6_PWM_Capture_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Capture_1",
        "PWM",
        "signal capture",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Capture_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "CCU6 PWM signal capture",
      "name": "CCU6_PWM_Capture_1_KIT_TC375_LK",
      "description": "A simple PWM signal is generated by toggling a port pin. The resulting PWM frequency and duty cycle\r\nis measured by the Capture/Control Unit 6 (CCU6).",
      "abstract": "The CCU6 unit is used to capture an external PWM signal and calculate its frequency and duty cycle.",
      "folder": "CCU6_PWM_Capture_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Capture_1",
        "PWM",
        "signal capture",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Capture_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "CCU6 PWM signal capture",
      "name": "CCU6_PWM_Capture_1_KIT_TC397_TFT",
      "description": "A simple PWM signal is generated by toggling a port pin. The resulting PWM frequency and duty cycle\r\nis measured by the Capture/Control Unit 6 (CCU6).",
      "abstract": "The CCU6 unit is used to capture an external PWM signal and calculate its frequency and duty cycle.",
      "folder": "CCU6_PWM_Capture_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Capture_1",
        "PWM",
        "signal capture",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Capture_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via CCU6",
      "name": "CCU6_PWM_Generation_1_KIT_TC275_LK",
      "description": "The code example uses the Timer T12 of CCU6 and its three compare modules to generate three PWM signals\r\nwith a frequency of 20 kHz and different duty cycles (25%, 50% and 75%). T12 is configured to count up\r\nand down and the three signals are center aligned. The generated PWM signals are sent to the pins\r\navailable on the board and can be observed with an oscilloscope.",
      "abstract": "Three center aligned Pulse Width Modulated (PWM) signals with fixed frequency and different duty cycles are generated using CCU6.",
      "folder": "CCU6_PWM_Generation_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Generation_1",
        "Duty cycle",
        "Multi-Channel mode",
        "Oscilloscope",
        "PWM",
        "T12"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Generation_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via CCU6",
      "name": "CCU6_PWM_Generation_1_KIT_TC297_TFT",
      "description": "The code example uses the Timer T12 of CCU6 and its three compare modules to generate three PWM signals\r\nwith a frequency of 20 kHz and different duty cycles (25%, 50% and 75%). T12 is configured to count up\r\nand down and the three signals are center aligned. The generated PWM signals are sent to the pins\r\navailable on the board and can be observed with an oscilloscope.",
      "abstract": "Three center aligned Pulse Width Modulated (PWM) signals with fixed frequency and different duty cycles are generated using CCU6.",
      "folder": "CCU6_PWM_Generation_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Generation_1",
        "Duty cycle",
        "Multi-Channel mode",
        "Oscilloscope",
        "PWM",
        "T12"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Generation_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via CCU6",
      "name": "CCU6_PWM_Generation_1_KIT_TC334_LK",
      "description": "The code example uses the Timer T12 of CCU6 and its three compare modules to generate three PWM signals\r\nwith a frequency of 20 kHz and different duty cycles (25%, 50% and 75%). T12 is configured to count up\r\nand down and the three signals are center aligned. The generated PWM signals are sent to the pins\r\navailable on the board and can be observed with an oscilloscope.",
      "abstract": "Three center aligned Pulse Width Modulated (PWM) signals with fixed frequency and different duty cycles are generated using CCU6.",
      "folder": "CCU6_PWM_Generation_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Generation_1",
        "Duty cycle",
        "Multi-Channel mode",
        "Oscilloscope",
        "PWM",
        "T12"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Generation_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via CCU6",
      "name": "CCU6_PWM_Generation_1_KIT_TC375_LK",
      "description": "The code example uses the Timer T12 of CCU6 and its three compare modules to generate three PWM signals\r\nwith a frequency of 20 kHz and different duty cycles (25%, 50% and 75%). T12 is configured to count up\r\nand down and the three signals are center aligned. The generated PWM signals are sent to the pins\r\navailable on the board and can be observed with an oscilloscope.",
      "abstract": "Three center aligned Pulse Width Modulated (PWM) signals with fixed frequency and different duty cycles are generated using CCU6.",
      "folder": "CCU6_PWM_Generation_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Generation_1",
        "Duty cycle",
        "Multi-Channel mode",
        "Oscilloscope",
        "PWM",
        "T12"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Generation_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via CCU6",
      "name": "CCU6_PWM_Generation_1_KIT_TC397_TFT",
      "description": "The code example uses the Timer T12 of CCU6 and its three compare modules to generate three PWM signals\r\nwith a frequency of 20 kHz and different duty cycles (25%, 50% and 75%). T12 is configured to count up\r\nand down and the three signals are center aligned. The generated PWM signals are sent to the pins\r\navailable on the board and can be observed with an oscilloscope.",
      "abstract": "Three center aligned Pulse Width Modulated (PWM) signals with fixed frequency and different duty cycles are generated using CCU6.",
      "folder": "CCU6_PWM_Generation_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CCU6",
        "CCU6_PWM_Generation_1",
        "Duty cycle",
        "Multi-Channel mode",
        "Oscilloscope",
        "PWM",
        "T12"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU6_PWM_Generation_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Clock configuration via CCU",
      "name": "CCU_Clock_1_KIT_TC334_LK",
      "description": "The Clock Control�Unit (CCU)�is used to configure the PLL clock.\r\nThis clock signal is routed to an external clock output pin, which can be observed with an oscilloscope.",
      "abstract": "The clock system is configured based on a PLL frequency of 200 MHz and the clock signal is provided at an external port pin.",
      "folder": "CCU_Clock_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Oscilloscope",
        "PLL",
        "CCU",
        "CCU_Clock_1",
        "clock",
        "SCU"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU_Clock_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Clock configuration via CCU",
      "name": "CCU_Clock_1_KIT_TC375_LK",
      "description": "The Clock Control�Unit (CCU)�is used to configure the PLL clock.\r\nThis clock signal is routed to an external clock output pin, which can be observed with an oscilloscope.",
      "abstract": "The clock system is configured based on a PLL frequency of 200 MHz and the clock signal is provided at an external port pin.",
      "folder": "CCU_Clock_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Oscilloscope",
        "PLL",
        "CCU",
        "CCU_Clock_1",
        "clock",
        "SCU"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU_Clock_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Clock configuration via CCU",
      "name": "CCU_Clock_1_KIT_TC397_TFT",
      "description": "The Clock Control�Unit (CCU)�is used to configure the PLL clock.\r\nThis clock signal is routed to an external clock output pin, which can be observed with an oscilloscope.",
      "abstract": "The clock system is configured based on a PLL frequency of 200 MHz and the clock signal is provided at an external port pin.",
      "folder": "CCU_Clock_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Oscilloscope",
        "PLL",
        "CCU",
        "CCU_Clock_1",
        "clock",
        "SCU"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CCU_Clock_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "CPU performance counters",
      "name": "CPU_Perf_Counters_1_KIT_TC275_LK",
      "description": "The CPU performance counters are counting the number of instructions, clock ticks and multi\r\ncounters ticks. They are used to measure the run-time of a c-function.\r\nThe result is stored in a global variable.",
      "abstract": "Measure code performance via the CPU performance counters",
      "folder": "CPU_Perf_Counters_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Perf_Counters_1",
        "Performance"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Perf_Counters_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "CPU performance counters",
      "name": "CPU_Perf_Counters_1_KIT_TC297_TFT",
      "description": "The CPU performance counters are counting the number of instructions, clock ticks and multi\r\ncounters ticks. They are used to measure the run-time of a c-function.\r\nThe result is stored in a global variable.",
      "abstract": "Measure code performance via the CPU performance counters",
      "folder": "CPU_Perf_Counters_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Perf_Counters_1",
        "Performance"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Perf_Counters_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "CPU performance counters",
      "name": "CPU_Perf_Counters_1_KIT_TC334_LK",
      "description": "The CPU performance counters are counting the number of instructions, clock ticks and multi\r\ncounters ticks. They are used to measure the run-time of a c-function.\r\nThe result is stored in a global variable.",
      "abstract": "Measure code performance via the CPU performance counters.",
      "folder": "CPU_Perf_Counters_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Perf_Counters_1",
        "Performance"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Perf_Counters_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "CPU performance counters",
      "name": "CPU_Perf_Counters_1_KIT_TC375_LK",
      "description": "The CPU performance counters are counting the number of instructions, clock ticks and multi\r\ncounters ticks. They are used to measure the run-time of a c-function.\r\nThe result is stored in a global variable.",
      "abstract": "Measure code performance via the CPU performance counters.",
      "folder": "CPU_Perf_Counters_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Perf_Counters_1",
        "Performance"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Perf_Counters_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "CPU performance counters",
      "name": "CPU_Perf_Counters_1_KIT_TC397_TFT",
      "description": "The CPU performance counters are counting the number of instructions, clock ticks and multi\r\ncounters ticks. They are used to measure the run-time of a c-function.\r\nThe result is stored in a global variable.",
      "abstract": "Measure code performance via the CPU performance counters.",
      "folder": "CPU_Perf_Counters_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Perf_Counters_1",
        "Performance"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Perf_Counters_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "TRAP error recognition and reaction",
      "name": "CPU_Trap_Recognition_1_KIT_TC275_LK",
      "description": "The tutorial describes what types of traps are supported by the AURIX microcontroller, their root\r\ncauses and how to identify them. AURIX architecture supports different types of traps. Three different\r\ntraps can be provoked with this example and the tutorial guides the user through the needed steps to\r\nobserve the root cause of each trap.",
      "abstract": "This example shows how to identify the root cause of a trap.",
      "folder": "CPU_Trap_Recognition_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Trap_Recognition_1",
        "trap"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Trap_Recognition_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-06-29T00:00:00.000Z"
    },
    {
      "title": "TRAP error recognition and reaction",
      "name": "CPU_Trap_Recognition_1_KIT_TC297_TFT",
      "description": "The tutorial describes what types of traps are supported by the AURIX microcontroller, their root\r\ncauses and how to identify them. AURIX architecture supports different types of traps. Three different\r\ntraps can be provoked with this example and the tutorial guides the user through the needed steps to\r\nobserve the root cause of each trap.",
      "abstract": "This example shows how to identify the root cause of a trap.",
      "folder": "CPU_Trap_Recognition_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Trap_Recognition_1",
        "trap"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Trap_Recognition_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "TRAP error recognition and reaction",
      "name": "CPU_Trap_Recognition_1_KIT_TC334_LK",
      "description": "The tutorial describes what types of traps are supported by the AURIX microcontroller, their root\r\ncauses and how to identify them. AURIX architecture supports different types of traps. Three different\r\ntraps can be provoked with this example and the tutorial guides the user through the needed steps to\r\nobserve the root cause of each trap.",
      "abstract": "This example shows how to identify the root cause of a trap.",
      "folder": "CPU_Trap_Recognition_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Trap_Recognition_1",
        "trap"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Trap_Recognition_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "TRAP error recognition and reaction",
      "name": "CPU_Trap_Recognition_1_KIT_TC375_LK",
      "description": "The tutorial describes what types of traps are supported by the AURIX microcontroller, their root\r\ncauses and how to identify them. AURIX architecture supports different types of traps. Three different\r\ntraps can be provoked with this example and the tutorial guides the user through the needed steps to\r\nobserve the root cause of each trap.",
      "abstract": "This example shows how to identify the root cause of a trap.",
      "folder": "CPU_Trap_Recognition_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Trap_Recognition_1",
        "trap"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Trap_Recognition_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "TRAP error recognition and reaction",
      "name": "CPU_Trap_Recognition_1_KIT_TC397_TFT",
      "description": "The tutorial describes what types of traps are supported by the AURIX microcontroller, their root\r\ncauses and how to identify them. AURIX architecture supports different types of traps. Three different\r\ntraps can be provoked with this example and the tutorial guides the user through the needed steps to\r\nobserve the root cause of each trap.",
      "abstract": "This example shows how to identify the root cause of a trap.",
      "folder": "CPU_Trap_Recognition_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CPU",
        "CPU_Trap_Recognition_1",
        "trap"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_CPU_Trap_Recognition_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "DMA transfer of ADC conversion results",
      "name": "DMA_ADC_Transfer_1_KIT_TC275_LK",
      "description": "At the end of an analog-to-digital conversion of the VADC module, an interrupt is triggered, which starts\r\nthe data transfer of the converted ADC results via DMA to the LMURAM. The ADC conversion is started\r\nmanually via a command of a serial monitor.",
      "abstract": "The DMA is used to transfer ADC measurements results to LMURAM.",
      "folder": "DMA_ADC_Transfer_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DMA",
        "DMA_ADC_Transfer_1",
        "VADC",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_ADC_Transfer_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "DMA transfer of ADC conversion results",
      "name": "DMA_ADC_Transfer_1_KIT_TC297_TFT",
      "description": "At the end of an analog-to-digital conversion of the VADC module, an interrupt is triggered, which starts\r\nthe data transfer of the converted ADC results via DMA to the LMURAM. The ADC conversion is started\r\nmanually via a command of a serial monitor.",
      "abstract": "The DMA is used to transfer ADC measurements results to LMURAM.",
      "folder": "DMA_ADC_Transfer_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DMA",
        "DMA_ADC_Transfer_1",
        "VADC",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_ADC_Transfer_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "DMA transfer of ADC conversion results",
      "name": "DMA_ADC_Transfer_1_KIT_TC334_LK",
      "description": "At the end of an analog-to-digital conversion of the Enhanced Versatile Analog-to-Digital Converter\r\n(EVADC) module, an interrupt is triggered, which starts the data transfer of the converted ADC results\r\nvia DMA to the CPU0 Data Scratch-Pad SRAM (DSPR0). The ADC conversion is started manually via a\r\ncommand of a serial monitor.",
      "abstract": "The DMA is used to transfer ADC measurements results to CPU0 DSPR.",
      "folder": "DMA_ADC_Transfer_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DMA",
        "DMA_ADC_Transfer_1",
        "EVADC",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_ADC_Transfer_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "DMA transfer of ADC conversion results",
      "name": "DMA_ADC_Transfer_1_KIT_TC375_LK",
      "description": "At the end of an analog-to-digital conversion of the Enhanced Versatile Analog-to-Digital Converter\r\n(EVADC) module, an interrupt is triggered, which starts the data transfer of the converted ADC results\r\nvia DMA to the CPU0 Data Scratch-Pad SRAM (DSPR0). The ADC conversion is started manually via a\r\ncommand of a serial monitor.",
      "abstract": "The DMA is used to transfer ADC measurements results to CPU0 DSPR.",
      "folder": "DMA_ADC_Transfer_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DMA",
        "DMA_ADC_Transfer_1",
        "EVADC",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_ADC_Transfer_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "DMA transfer of ADC conversion results",
      "name": "DMA_ADC_Transfer_1_KIT_TC397_TFT",
      "description": "At the end of an analog-to-digital conversion of the Enhanced Versatile Analog-to-Digital\r\nConverter (EVADC) module, an interrupt is triggered, which starts the data transfer of the converted\r\nADC results via DMA to the LMURAM. The ADC conversion is started manually via a command of a serial\r\nmonitor.",
      "abstract": "The DMA is used to transfer ADC measurements results to LMURAM.",
      "folder": "DMA_ADC_Transfer_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_AURIX_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DMA",
        "DMA_ADC_Transfer_1",
        "EVADC",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_ADC_Transfer_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "DMA Linked List Mode usage",
      "name": "DMA_Linked_List_Mode_1_KIT_TC275_LK",
      "description": "In this training, four DMA transactions are configured in DMA Linked List mode.\r\nTriggering one DMA transaction leads to the execution of all DMA transactions consecutively.\r\nAn interrupt is triggered at the completion of the last DMA transaction.\r\nIf DMA has correctly transferred the data, the LED driven by port pin 00.6 toggles and a new cycle\r\nstarts again. Otherwise, the LED driven by port pin 00.5 turns ON and no more DMA transfers are done.",
      "abstract": "DMA Linked Lists are used to execute a series of DMA transactions without CPU intervention.",
      "folder": "DMA_Linked_List_Mode_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Linked_List_Mode_1",
        "Linked list",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Linked_List_Mode_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "DMA Linked List Mode usage",
      "name": "DMA_Linked_List_Mode_1_KIT_TC297_TFT",
      "description": "In this training, four DMA transactions are configured in DMA Linked List mode.\r\nTriggering one DMA transaction leads to the execution of all DMA transactions consecutively.\r\nAn interrupt is triggered at the completion of the last DMA transaction.\r\nIf DMA has correctly transferred the data, the LED driven by port pin 13.3 toggles and a new cycle\r\nstarts again. Otherwise, the LED driven by port pin 13.2 turns ON and no more DMA transfers are done.",
      "abstract": "DMA Linked Lists are used to execute a series of DMA transactions without CPU intervention.",
      "folder": "DMA_Linked_List_Mode_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Linked_List_Mode_1",
        "Linked list",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Linked_List_Mode_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "DMA Linked List Mode usage",
      "name": "DMA_Linked_List_Mode_1_KIT_TC334_LK",
      "description": "In this training, four DMA transactions are configured in DMA Linked List mode.\r\nTriggering one DMA transaction leads to the execution of all DMA transactions consecutively.\r\nAn interrupt is triggered at the completion of the last DMA transaction.\r\nIf DMA has correctly transferred the data, the LED driven by port pin 00.6 toggles and a new cycle\r\nstarts again. Otherwise, the LED driven by port pin 00.5 turns ON and no more DMA transfers are done.",
      "abstract": "DMA Linked Lists are used to execute a series of DMA transactions without CPU intervention.",
      "folder": "DMA_Linked_List_Mode_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Linked_List_Mode_1",
        "Linked list",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Linked_List_Mode_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "DMA Linked List Mode usage",
      "name": "DMA_Linked_List_Mode_1_KIT_TC375_LK",
      "description": "In this training, four DMA transactions are configured in DMA Linked List mode.\r\nTriggering one DMA transaction leads to the execution of all DMA transactions consecutively.\r\nAn interrupt is triggered at the completion of the last DMA transaction.\r\nIf DMA has correctly transferred the data, the LED driven by port pin 00.6 toggles and a new cycle\r\nstarts again. Otherwise, the LED driven by port pin 00.5 turns ON and no more DMA transfers are done.",
      "abstract": "DMA Linked Lists are used to execute a series of DMA transactions without CPU intervention.",
      "folder": "DMA_Linked_List_Mode_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Linked_List_Mode_1",
        "Linked list",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Linked_List_Mode_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "DMA Linked List Mode usage",
      "name": "DMA_Linked_List_Mode_1_KIT_TC397_TFT",
      "description": "In this training, four DMA transactions are configured in DMA Linked List mode.\r\nTriggering one DMA transaction leads to the execution of all DMA transactions consecutively.\r\nAn interrupt is triggered at the completion of the last DMA transaction.\r\nIf DMA has correctly transferred the data, the LED driven by port pin 13.3 toggles and a new cycle\r\nstarts again. Otherwise, the LED driven by port pin 13.2 turns ON and no more DMA transfers are done.",
      "abstract": "DMA Linked Lists are used to execute a series of DMA transactions without CPU intervention.",
      "folder": "DMA_Linked_List_Mode_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Linked_List_Mode_1",
        "Linked list",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Linked_List_Mode_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "DMA transfer between memories",
      "name": "DMA_Mem_to_Mem_1_KIT_TC275_LK",
      "description": "The transfer of data is triggered by SW. The source is the Data Scratch Pad SRAM of CPU0 (DSPR0) and\r\nthe destination is the Local Memory Unit (LMURAM). At the end of the transactions, the data is\r\nverified by comparing the source and destination buffers. The success of the data transfer is signaled\r\nthrough the LED connected to pin 6 of port 00. Otherwise, the LED connected to pin 5 of port 00 is\r\nused. The same cycle is repeated each second.",
      "abstract": "The DMA is used to transfer ten words (32-bit) of data from one memory location to another without any CPU load.",
      "folder": "DMA_Mem_to_Mem_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Mem_to_Mem_1",
        "memory",
        "transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Mem_to_Mem_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "DMA transfer between memories",
      "name": "DMA_Mem_to_Mem_1_KIT_TC297_TFT",
      "description": "The transfer of data is triggered by SW. The source is the Data Scratch Pad SRAM of CPU0 (DSPR0) and\r\nthe destination is the Local Memory Unit (LMURAM). At the end of the transactions, the data is\r\nverified by comparing the source and destination buffers. The success of the data transfer is signaled\r\nthrough the LED connected to pin 0 of port 13. Otherwise, the LED connected to pin 1 of port 13 is\r\nused. The same cycle is repeated each second.",
      "abstract": "The DMA is used to transfer ten words (32-bit) of data from one memory location to another without any CPU load.",
      "folder": "DMA_Mem_to_Mem_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Mem_to_Mem_1",
        "memory",
        "transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Mem_to_Mem_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "DMA transfer between memories",
      "name": "DMA_Mem_to_Mem_1_KIT_TC334_LK",
      "description": "The transfer of data is triggered by SW. The source is the Data Scratch Pad SRAM of CPU0 (DSPR0) and\r\nthe destination is the Distributed Local Memory Unit (DLMU RAM). At the end of the transactions,\r\nthe data is verified by comparing the source and destination buffers. The success of the data transfer\r\nis signaled through the LED connected to pin 6 of port 00. Otherwise, the LED connected to pin 5 of\r\nport 00 is used. The same cycle is repeated each second.",
      "abstract": "The DMA is used to transfer ten words (32-bit) of data from one memory location to another without any CPU load.",
      "folder": "DMA_Mem_to_Mem_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Mem_to_Mem_1",
        "memory",
        "transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Mem_to_Mem_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "DMA transfer between memories",
      "name": "DMA_Mem_to_Mem_1_KIT_TC375_LK",
      "description": "The transfer of data is triggered by SW. The source is the Data Scratch Pad SRAM of CPU0 (DSPR0) and\r\nthe destination is the Distributed Local Memory Unit (DLMU RAM). At the end of the transactions,\r\nthe data is verified by comparing the source and destination buffers. The success of the data transfer\r\nis signaled through the LED connected to pin 6 of port 00. Otherwise, the LED connected to pin 5 of\r\nport 00 is used. The same cycle is repeated each second.",
      "abstract": "The DMA is used to transfer ten words (32-bit) of data from one memory location to another without any CPU load.",
      "folder": "DMA_Mem_to_Mem_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Mem_to_Mem_1",
        "memory",
        "transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Mem_to_Mem_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "DMA transfer between memories",
      "name": "DMA_Mem_to_Mem_1_KIT_TC397_TFT",
      "description": "The transfer of data is triggered by SW. The source is the Data Scratch Pad SRAM of CPU0 (DSPR0) and\r\nthe destination is the Distributed Local Memory Unit (DLMU RAM). At the end of the transactions,\r\nthe data is verified by comparing the source and destination buffers. The success of the data transfer\r\nis signaled through the LED connected to pin 0 of port 13. Otherwise, the LED connected to pin 1 of\r\nport 13 is used. The same cycle is repeated each second.",
      "abstract": "The DMA is used to transfer ten words (32-bit) of data from one memory location to another without any CPU load.",
      "folder": "DMA_Mem_to_Mem_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DMA",
        "DMA_Mem_to_Mem_1",
        "memory",
        "transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DMA_Mem_to_Mem_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Delta-Sigma ADC conversion",
      "name": "DSADC_1_KIT_TC275_LK",
      "description": "The Delta-Sigma ADC (DSADC) continuously measures an external signal on channel 0, connected\r\nto port pin AN2. It converts the analog signal to a data stream and then a global variable is updated\r\nto the current conversion result.",
      "abstract": "The DSADC is used to convert an external signal to a stream of discrete digital values.",
      "folder": "DSADC_1_KIT_TC275_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DSADC",
        "DSADC_1",
        "delta-sigma"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DSADC_1_KIT_TC275_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Delta-Sigma ADC conversion",
      "name": "DSADC_1_KIT_TC297_TFT",
      "description": "The Delta-Sigma ADC (DSADC) continuously measures an external signal on channel 0, connected\r\nto port pin AN2. It converts the analog signal to a data stream and then a global variable is updated\r\nto the current conversion result.",
      "abstract": "The DSADC is used to convert an external signal to a stream of discrete digital values.",
      "folder": "DSADC_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "DSADC",
        "DSADC_1",
        "delta-sigma"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_DSADC_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Enhanced Delta-Sigma ADC conversion",
      "name": "EDSADC_1_KIT_TC375_LK",
      "description": "The Enhanced Delta-Sigma ADC (EDSADC) continuously measures an external signal on channel 3, connected\r\nto port pin AN0. It converts the analog signal to a data stream and then a global variable is updated\r\nto the current conversion result. The input value is determined by the potentiometer on the board.",
      "abstract": "The EDSADC is used to convert an external signal to a stream of discrete digital values.",
      "folder": "EDSADC_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "EDSADC",
        "EDSADC_1",
        "delta-sigma"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_EDSADC_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Enhanced Delta-Sigma ADC conversion",
      "name": "EDSADC_1_KIT_TC397_TFT",
      "description": "The Enhanced Delta-Sigma ADC (EDSADC) continuously measures an external signal on channel 0, connected\r\nto port pin AN2. It converts the analog signal to a data stream and then a global variable is updated\r\nto the current conversion result.",
      "abstract": "The EDSADC is used to convert an external signal to a stream of discrete digital values.",
      "folder": "EDSADC_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_AURIX_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ADC",
        "AURIX",
        "EDSADC",
        "EDSADC_1",
        "delta-sigma"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_EDSADC_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "External interrupt generation",
      "name": "ERU_Interrupt_1_KIT_TC275_LK",
      "description": "The code example uses the External Request Unit (ERU) to generate an interrupt for each\r\nfalling and rising edge at an input pin. The falling and rising edges are generated\r\nwith the pin P00.7 connected to the board�s button. If an interrupt occurs, an LED will be toggled.",
      "abstract": "The ERU is used to generate an interrupt on each rising and falling edge at an input pin.",
      "folder": "ERU_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "ERU",
        "ERU_Interrupt_1",
        "external request",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ERU_Interrupt_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "External interrupt generation",
      "name": "ERU_Interrupt_1_KIT_TC297_TFT",
      "description": "The code example uses the External Request Unit (ERU) to generate an interrupt for each\r\nfalling and rising edge at the input pin P02.0. The falling and rising edges are generated\r\nwith pin P02.1. If an Interrupt occurs, an LED will be toggled.",
      "abstract": "The ERU is used to generate an interrupt on each rising and falling edge at an input pin.",
      "folder": "ERU_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "ERU",
        "ERU_Interrupt_1",
        "external request",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ERU_Interrupt_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "External interrupt generation",
      "name": "ERU_Interrupt_1_KIT_TC334_LK",
      "description": "The code example uses the External Request Unit (ERU) to generate an interrupt for each falling and\r\nrising edge at an input pin. The falling and rising edges are generated with the pin P00.7 connected\r\nto the board�s button. If an interrupt occurs, an LED will be toggled.",
      "abstract": "The ERU is used to generate an interrupt on each rising and falling edge at an input pin.",
      "folder": "ERU_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "ERU",
        "ERU_Interrupt_1",
        "external request",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ERU_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "External interrupt generation",
      "name": "ERU_Interrupt_1_KIT_TC375_LK",
      "description": "The code example uses the External Request Unit (ERU) to generate an interrupt for each falling and\r\nrising edge at an input pin. The falling and rising edges are generated with the pin P00.7 connected\r\nto the board�s button. If an interrupt occurs, an LED will be toggled.",
      "abstract": "The ERU is used to generate an interrupt on each rising and falling edge at an input pin.",
      "folder": "ERU_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "ERU",
        "ERU_Interrupt_1",
        "external request",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ERU_Interrupt_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "External interrupt generation",
      "name": "ERU_Interrupt_1_KIT_TC397_TFT",
      "description": "The code example uses the External Request Unit (ERU) to generate an interrupt for each\r\nfalling and rising edge at the input pin P02.0. The falling and rising edges are generated\r\nwith pin P02.1. If an Interrupt occurs, an LED will be toggled.",
      "abstract": "The ERU is used to generate an interrupt on each rising and falling edge at an input pin.",
      "folder": "ERU_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "ERU",
        "ERU_Interrupt_1",
        "external request",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_ERU_Interrupt_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Ethernet communication",
      "name": "Ethernet_1_KIT_TC375_LK",
      "description": "The TCP/IP protocol provided by the Lightweight IP (LwIP) is used to exchange strings between the board\r\nand a remote client terminal.\r\nThe board obtains an IP address and publishes its hostname using the DHCP protocol.\r\nThe System Timer Module (STM) is used to update the internal LwIP timers.\r\nThe Asynchronous/Synchronous Interface (ASCLIN) module is used for debug logging.",
      "abstract": "The Gigabit Ethernet Media Access Controller (GETH) module and the Lightweight IP (LwIP) stack are used to implement a network echo application.",
      "folder": "Ethernet_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "Ethernet",
        "communication",
        "Ethernet_1",
        "AURIX",
        "UART"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Ethernet_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Ethernet communication",
      "name": "Ethernet_1_KIT_TC397_TFT",
      "description": "The TCP/IP protocol provided by the Lightweight IP (LwIP) is used to exchange strings between the board\r\nand a remote client terminal.\r\nThe board obtains an IP address and publishes its hostname using the DHCP protocol.\r\nThe System Timer Module (STM) is used to update the internal LwIP timers.\r\nThe Asynchronous/Synchronous Interface (ASCLIN) module is used for debug logging.",
      "abstract": "The Gigabit Ethernet Media Access Controller (GETH) module and the Lightweight IP (LwIP) stack are used to implement a network echo application.",
      "folder": "Ethernet_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "Ethernet",
        "communication",
        "Ethernet_1",
        "AURIX",
        "UART"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Ethernet_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "FCE CRC calculation",
      "name": "FCE_CRC_1_KIT_TC275_LK",
      "description": "This training shows how to configure the FCE to calculate CRC of a known message\r\nwith all supported algorithms (CRC32, CRC16 and CRC8).\r\nThe FCE interrupt is enabled to report execution errors.\r\nAny CRC kernel calculation error is indicated by switching ON a different combinations of LEDs.",
      "abstract": "The FCE module is used to calculate the CRC of the same message with different algorithms.",
      "folder": "FCE_CRC_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CRC16",
        "CRC32",
        "CRC8",
        "FCE",
        "FCE_CRC_1",
        "Hardware Acceleration"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_FCE_CRC_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "FCE CRC calculation",
      "name": "FCE_CRC_1_KIT_TC297_TFT",
      "description": "This training shows how to configure the FCE to calculate CRC of a known message\r\nwith all supported algorithms (CRC32, CRC16 and CRC8).\r\nThe FCE interrupt is enabled to report execution errors.\r\nAny CRC kernel calculation error is indicated by switching ON the related LED.",
      "abstract": "The FCE module is used to calculate the CRC of the same message with different algorithms.",
      "folder": "FCE_CRC_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CRC16",
        "CRC32",
        "CRC8",
        "FCE",
        "FCE_CRC_1",
        "Hardware Acceleration"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_FCE_CRC_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "FCE CRC calculation",
      "name": "FCE_CRC_1_KIT_TC334_LK",
      "description": "This training shows how to configure the FCE to calculate CRC of a known message\r\nwith a CRC32 algorithm.\r\nThe FCE interrupt is enabled to report execution errors.\r\nAny CRC kernel calculation error is indicated by switching ON an LED.",
      "abstract": "The FCE module is used to calculate the CRC of a message with a CRC32 algorithm.",
      "folder": "FCE_CRC_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CRC16",
        "CRC32",
        "CRC8",
        "FCE",
        "FCE_CRC_1",
        "Hardware Acceleration"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_FCE_CRC_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "FCE CRC calculation",
      "name": "FCE_CRC_1_KIT_TC375_LK",
      "description": "This training shows how to configure the FCE to calculate CRC of a known message\r\nwith a CRC32 algorithm.\r\nThe FCE interrupt is enabled to report execution errors.\r\nAny CRC kernel calculation error is indicated by switching ON an LED.",
      "abstract": "The FCE module is used to calculate the CRC of a message with a CRC32 algorithm.",
      "folder": "FCE_CRC_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CRC16",
        "CRC32",
        "CRC8",
        "FCE",
        "FCE_CRC_1",
        "Hardware Acceleration"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_FCE_CRC_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "FCE CRC calculation",
      "name": "FCE_CRC_1_KIT_TC397_TFT",
      "description": "This training shows how to configure the FCE to calculate CRC of a known message\r\nwith a CRC32 algorithm.\r\nThe FCE interrupt is enabled to report execution errors.\r\nAny CRC kernel calculation error is indicated by switching ON an LED.",
      "abstract": "The FCE module is used to calculate the CRC of a message with a CRC32 algorithm.",
      "folder": "FCE_CRC_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CRC16",
        "CRC32",
        "CRC8",
        "FCE",
        "FCE_CRC_1",
        "Hardware Acceleration"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_FCE_CRC_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Flash programming",
      "name": "Flash_Programming_1_KIT_TC275_LK",
      "description": "In this example, 64 Bytes of the Program Flash memory (PFLASH) are flashed and verified afterwards.\r\nFurthermore, 64 Bytes of the Data Flash memory (DFLASH) are flashed and verified. Before any write\r\noperation, the flash memories are erased. If the flash operation is successful, an LED for each tested\r\nmemory is turned ON.",
      "abstract": "This example shows how to flash the Program Flash memory and the Data Flash memory.",
      "folder": "Flash_Programming_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DFLASH",
        "Flash",
        "Flash_Programming_1",
        "PFLASH",
        "data",
        "erase",
        "page",
        "page mode",
        "program",
        "programming",
        "verify",
        "write page"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Flash_Programming_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Flash programming",
      "name": "Flash_Programming_1_KIT_TC297_TFT",
      "description": "In this example, 64 Bytes of the Program Flash memory (PFLASH) are flashed and verified afterwards.\r\nFurthermore, 64 Bytes of the Data Flash memory (DFLASH) are flashed and verified. Before any write\r\noperation, the flash memories are erased. If the flash operation is successful, an LED for each tested\r\nmemory is turned ON.",
      "abstract": "This example shows how to flash the Program Flash memory and the Data Flash memory.",
      "folder": "Flash_Programming_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DFLASH",
        "Flash",
        "Flash_Programming_1",
        "PFLASH",
        "data",
        "erase",
        "page",
        "page mode",
        "program",
        "programming",
        "verify",
        "write page"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Flash_Programming_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Flash programming",
      "name": "Flash_Programming_1_KIT_TC334_LK",
      "description": "In this example, 64 Bytes of the Program Flash memory (PFLASH) are flashed and verified afterwards.\r\nFurthermore, 64 Bytes of the Data Flash memory (DFLASH) are flashed and verified. Before any write\r\noperation, the flash memories are erased. If the flash operation is successful, an LED for each tested\r\nmemory is turned ON.",
      "abstract": "This example shows how to flash the Program Flash memory and the Data Flash memory.",
      "folder": "Flash_Programming_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DFLASH",
        "Flash",
        "Flash_Programming_1",
        "PFLASH",
        "data",
        "erase",
        "page",
        "page mode",
        "program",
        "programming",
        "verify",
        "write page"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Flash_Programming_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Flash programming",
      "name": "Flash_Programming_1_KIT_TC375_LK",
      "description": "In this example, 64 Bytes of the Program Flash memory (PFLASH) are flashed and verified afterwards.\r\nFurthermore, 64 Bytes of the Data Flash memory (DFLASH) are flashed and verified. Before any write\r\noperation, the flash memories are erased. If the flash operation is successful, an LED for each tested\r\nmemory is turned ON.",
      "abstract": "This example shows how to flash the Program Flash memory and the Data Flash memory.",
      "folder": "Flash_Programming_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DFLASH",
        "Flash",
        "Flash_Programming_1",
        "PFLASH",
        "data",
        "erase",
        "page",
        "page mode",
        "program",
        "programming",
        "verify",
        "write page"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Flash_Programming_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Flash programming",
      "name": "Flash_Programming_1_KIT_TC397_TFT",
      "description": "In this example, 64 Bytes of the Program Flash memory (PFLASH) are flashed and verified afterwards.\r\nFurthermore, 64 Bytes of the Data Flash memory (DFLASH) are flashed and verified. Before any write\r\noperation, the flash memories are erased. If the flash operation is successful, an LED for each tested\r\nmemory is turned ON.",
      "abstract": "This example shows how to flash the Program Flash memory and the Data Flash memory.",
      "folder": "Flash_Programming_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DFLASH",
        "Flash",
        "Flash_Programming_1",
        "PFLASH",
        "data",
        "erase",
        "page",
        "page mode",
        "program",
        "programming",
        "verify",
        "write page"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Flash_Programming_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "LED controlled via a push button",
      "name": "GPIO_LED_Button_1_KIT_TC275_LK",
      "description": "Upon pressure of a push button, an LED is turned on and the LED is turned off when releasing the button.\r\nOne port pin is configured as input for checking the push button state\r\nand the other port pin is configured as output to control the LED.",
      "abstract": "An LED is controlled via a push button.",
      "folder": "GPIO_LED_Button_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPIO",
        "GPIO_LED_Button_1",
        "LED",
        "pin",
        "port",
        "port pin",
        "push button",
        "push-pull"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPIO_LED_Button_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "LED controlled via a push button",
      "name": "GPIO_LED_Button_1_KIT_TC297_TFT",
      "description": "Upon pressure of a push button, an LED is turned on and the LED is turned off when\r\nreleasing the button. One port pin is configured as input for checking the push button\r\nstate and the other port pin is configured as output to control the LED.\r\nShort the port pins P14.4 with P14.5 (pin 39 and 40 of header X102) to switch on the LED D110.",
      "abstract": "An LED is controlled via a push button.",
      "folder": "GPIO_LED_Button_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPIO",
        "GPIO_LED_Button_1",
        "LED",
        "pin",
        "port",
        "port pin",
        "push button",
        "push-pull"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPIO_LED_Button_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "LED controlled via a push button",
      "name": "GPIO_LED_Button_1_KIT_TC334_LK",
      "description": "Upon pressure of a push button, an LED is turned on and the LED is turned off when\r\nreleasing the button. One port pin is configured as input for checking the push button\r\nstate and the other port pin is configured as output to control the LED.",
      "abstract": "An LED is controlled via a push button.",
      "folder": "GPIO_LED_Button_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPIO",
        "GPIO_LED_Button_1",
        "LED",
        "pin",
        "port",
        "port pin",
        "push button",
        "push-pull"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPIO_LED_Button_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "LED controlled via a push button",
      "name": "GPIO_LED_Button_1_KIT_TC375_LK",
      "description": "Upon pressure of a push button, an LED is turned on and the LED is turned off when\r\nreleasing the button. One port pin is configured as input for checking the push button\r\nstate and the other port pin is configured as output to control the LED.",
      "abstract": "An LED is controlled via a push button.",
      "folder": "GPIO_LED_Button_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPIO",
        "GPIO_LED_Button_1",
        "LED",
        "pin",
        "port",
        "port pin",
        "push button",
        "push-pull"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPIO_LED_Button_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "LED controlled via a push button",
      "name": "GPIO_LED_Button_1_KIT_TC397_TFT",
      "description": "Upon pressure of a push button, an LED is turned on and the LED is turned off when\r\nreleasing the button. One port pin is configured as input for checking the push button\r\nstate and the other port pin is configured as output to control the LED.\r\nShort the port pins P14.4 with P14.5 (pin 39 and 40 of header X102) to switch on the LED D110.",
      "abstract": "An LED is controlled via a push button.",
      "folder": "GPIO_LED_Button_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPIO",
        "GPIO_LED_Button_1",
        "LED",
        "pin",
        "port",
        "port pin",
        "push button",
        "push-pull"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPIO_LED_Button_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Capture of PWM signal via GPT12",
      "name": "GPT12_PWM_Capture_1_KIT_TC275_LK",
      "description": "GPT12 timers are configured in capture mode. The data from the captured PWM signal is used to calculate\r\nthe PWM frequency in software. The frequency is then stored in a variable.",
      "abstract": "The GPT12 unit is used to capture an external PWM signal and calculate the PWM frequency.",
      "folder": "GPT12_PWM_Capture_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "PWM",
        "timer",
        "frequency",
        "capture",
        "AURIX",
        "GPT12_PWM_Capture_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Capture_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Capture of PWM signal via GPT12",
      "name": "GPT12_PWM_Capture_1_KIT_TC297_TFT",
      "description": "GPT12 timers are configured in capture mode. The data from the captured PWM signal is used to calculate\r\nthe PWM frequency in software. The frequency is then stored in a variable.",
      "abstract": "The GPT12 unit is used to capture an external PWM signal and calculate the PWM frequency.",
      "folder": "GPT12_PWM_Capture_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "PWM",
        "timer",
        "frequency",
        "capture",
        "AURIX",
        "GPT12_PWM_Capture_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Capture_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Capture of PWM signal via GPT12",
      "name": "GPT12_PWM_Capture_1_KIT_TC334_LK",
      "description": "GPT12 timers are configured in capture mode. The data from the captured PWM signal is used to calculate\r\nthe PWM frequency in software. The frequency is then stored in a variable.",
      "abstract": "The GPT12 unit is used to capture an external PWM signal and calculate the PWM frequency.",
      "folder": "GPT12_PWM_Capture_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "PWM",
        "timer",
        "frequency",
        "capture",
        "AURIX",
        "GPT12_PWM_Capture_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Capture_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Capture of PWM signal via GPT12",
      "name": "GPT12_PWM_Capture_1_KIT_TC375_LK",
      "description": "GPT12 timers are configured in capture mode. The data from the captured PWM signal is used to calculate\r\nthe PWM frequency in software. The frequency is then stored in a variable.",
      "abstract": "The GPT12 unit is used to capture an external PWM signal and calculate the PWM frequency.",
      "folder": "GPT12_PWM_Capture_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "PWM",
        "timer",
        "frequency",
        "capture",
        "AURIX",
        "GPT12_PWM_Capture_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Capture_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Capture of PWM signal via GPT12",
      "name": "GPT12_PWM_Capture_1_KIT_TC397_TFT",
      "description": "GPT12 timers are configured in capture mode. The data from the captured PWM signal is used to calculate\r\nthe PWM frequency in software. The frequency is then stored in a variable.",
      "abstract": "The GPT12 unit is used to capture an external PWM signal and calculate the PWM frequency.",
      "folder": "GPT12_PWM_Capture_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "PWM",
        "timer",
        "frequency",
        "capture",
        "AURIX",
        "GPT12_PWM_Capture_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Capture_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via GPT12",
      "name": "GPT12_PWM_Generation_1_KIT_TC275_LK",
      "description": "The timer T3 of GPT1 is used in timer mode with its count direction configured to \"down-counting\".\r\nOn underflow of timer T3, the Output Toggle Latch (T3OTL) is toggled and the value of timer T2\r\nor T4 is transferred into timer T3 depending on T3OTL value. The state of an LED is toggled in an\r\ninterrupt service routine which is triggered by the timer T3.",
      "abstract": "A pulse width modulated (PWM) signal with fixed frequency and a defined duty cycle is generated using GPT12.",
      "folder": "GPT12_PWM_Generation_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12_PWM_Generation_1",
        "PWM",
        "GPT12",
        "Signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Generation_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via GPT12",
      "name": "GPT12_PWM_Generation_1_KIT_TC297_TFT",
      "description": "The timer T3 of GPT1 is used in timer mode with its count direction configured to \"down-counting\".\r\nOn underflow of timer T3, the Output Toggle Latch (T3OTL) is toggled and the value of timer T2\r\nor T4 is transferred into timer T3 depending on T3OTL value. The state of an LED is toggled in an\r\ninterrupt service routine which is triggered by the timer T3.",
      "abstract": "A pulse width modulated (PWM) signal with fixed frequency and a defined duty cycle is generated using GPT12.",
      "folder": "GPT12_PWM_Generation_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12_PWM_Generation_1",
        "PWM",
        "GPT12",
        "Signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Generation_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via GPT12",
      "name": "GPT12_PWM_Generation_1_KIT_TC334_LK",
      "description": "The timer T3 of GPT1 is used in timer mode with its count direction configured to \"down-counting\".\r\nOn underflow of timer T3, the Output Toggle Latch (T3OTL) is toggled and the value of timer T2\r\nor T4 is transferred into timer T3 depending on T3OTL value. The state of an LED is toggled in an\r\ninterrupt service routine which is triggered by the timer T3.",
      "abstract": "A pulse width modulated (PWM) signal with fixed frequency and a defined duty cycle is generated using GPT12.",
      "folder": "GPT12_PWM_Generation_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12_PWM_Generation_1",
        "PWM",
        "GPT12",
        "Signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Generation_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via GPT12",
      "name": "GPT12_PWM_Generation_1_KIT_TC375_LK",
      "description": "The timer T3 of GPT1 is used in timer mode with its count direction configured to \"down-counting\".\r\nOn underflow of timer T3, the Output Toggle Latch (T3OTL) is toggled and the value of timer T2\r\nor T4 is transferred into timer T3 depending on T3OTL value. The state of an LED is toggled in an\r\ninterrupt service routine which is triggered by the timer T3.",
      "abstract": "A pulse width modulated (PWM) signal with fixed frequency and a defined duty cycle is generated using GPT12.",
      "folder": "GPT12_PWM_Generation_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12_PWM_Generation_1",
        "PWM",
        "GPT12",
        "Signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Generation_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Generation of PWM via GPT12",
      "name": "GPT12_PWM_Generation_1_KIT_TC397_TFT",
      "description": "The timer T3 of GPT1 is used in timer mode with its count direction configured to \"down-counting\".\r\nOn underflow of timer T3, the Output Toggle Latch (T3OTL) is toggled and the value of timer T2\r\nor T4 is transferred into timer T3 depending on T3OTL value. The state of an LED is toggled in an\r\ninterrupt service routine which is triggered by the timer T3.",
      "abstract": "A pulse width modulated (PWM) signal with fixed frequency and a defined duty cycle is generated using GPT12.",
      "folder": "GPT12_PWM_Generation_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12_PWM_Generation_1",
        "PWM",
        "GPT12",
        "Signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_PWM_Generation_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Timer concatenation of GPT12",
      "name": "GPT12_Timer_Concatenation_1_KIT_TC275_LK",
      "description": "A 32-bit timer is formed by the concatenation of two 16-bit timers of the GPT12 module.\r\nWhen the 32-bit timer overflows, an interrupt is generated toggling an LED.",
      "abstract": "A 32-bit timer is formed by the concatenation of two timers of the GPT12 module. On timer overflow an interrupt is generated, which toggles an LED.",
      "folder": "GPT12_Timer_Concatenation_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "timer",
        "concatenation",
        "LED",
        "AURIX",
        "GPT12_Timer_Concatenation_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Concatenation_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Timer concatenation of GPT12",
      "name": "GPT12_Timer_Concatenation_1_KIT_TC297_TFT",
      "description": "A 32-bit timer is formed by the concatenation of two 16-bit timers of the GPT12 module.\r\nWhen the 32-bit timer overflows, an interrupt is generated toggling an LED.",
      "abstract": "A 32-bit timer is formed by the concatenation of two timers of the GPT12 module. On timer overflow an interrupt is generated, which toggles an LED.",
      "folder": "GPT12_Timer_Concatenation_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "timer",
        "concatenation",
        "LED",
        "AURIX",
        "GPT12_Timer_Concatenation_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Concatenation_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Timer concatenation of GPT12",
      "name": "GPT12_Timer_Concatenation_1_KIT_TC334_LK",
      "description": "A 32-bit timer is formed by the concatenation of two 16-bit timers of the GPT12 module.\r\nWhen the 32-bit timer overflows, an interrupt is generated toggling an LED.",
      "abstract": "A 32-bit timer is formed by the concatenation of two timers of the GPT12 module. On timer overflow an interrupt is generated, which toggles an LED.",
      "folder": "GPT12_Timer_Concatenation_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "timer",
        "concatenation",
        "LED",
        "AURIX",
        "GPT12_Timer_Concatenation_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Concatenation_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Timer concatenation of GPT12",
      "name": "GPT12_Timer_Concatenation_1_KIT_TC375_LK",
      "description": "A 32-bit timer is formed by the concatenation of two 16-bit timers of the GPT12 module.\r\nWhen the 32-bit timer overflows, an interrupt is generated toggling an LED.",
      "abstract": "A 32-bit timer is formed by the concatenation of two timers of the GPT12 module. On timer overflow an interrupt is generated, which toggles an LED.",
      "folder": "GPT12_Timer_Concatenation_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "timer",
        "concatenation",
        "LED",
        "AURIX",
        "GPT12_Timer_Concatenation_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Concatenation_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Timer concatenation of GPT12",
      "name": "GPT12_Timer_Concatenation_1_KIT_TC397_TFT",
      "description": "A 32-bit timer is formed by the concatenation of two 16-bit timers of the GPT12 module.\r\nWhen the 32-bit timer overflows, an interrupt is generated toggling an LED.",
      "abstract": "A 32-bit timer is formed by the concatenation of two timers of the GPT12 module. On timer overflow an interrupt is generated, which toggles an LED.",
      "folder": "GPT12_Timer_Concatenation_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "GPT12",
        "timer",
        "concatenation",
        "LED",
        "AURIX",
        "GPT12_Timer_Concatenation_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Concatenation_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "GPT12 timer interrupt",
      "name": "GPT12_Timer_Interrupt_1_KIT_TC275_LK",
      "description": "The timer T3 of the GPT12 module is configured to trigger an interrupt each 500 ms.\r\nIn its interrupt service routine, an LED is toggled.",
      "abstract": "The GPT12 module generates an interrupt each 500 ms and toggles an LED.",
      "folder": "GPT12_Timer_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12",
        "GPT12_Timer_Interrupt_1",
        "IR",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Interrupt_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GPT12 timer interrupt",
      "name": "GPT12_Timer_Interrupt_1_KIT_TC297_TFT",
      "description": "The timer T3 of the GPT12 module is configured to trigger an interrupt each 500 ms.\r\nIn its interrupt service routine, an LED is toggled.",
      "abstract": "The GPT12 module generates an interrupt each 500 ms and toggles an LED.",
      "folder": "GPT12_Timer_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12",
        "GPT12_Timer_Interrupt_1",
        "IR",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Interrupt_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GPT12 timer interrupt",
      "name": "GPT12_Timer_Interrupt_1_KIT_TC334_LK",
      "description": "The timer T3 of the GPT12 module is configured to trigger an interrupt each 500 ms.\r\nIn its interrupt service routine, an LED is toggled.",
      "abstract": "The GPT12 module generates an interrupt each 500 ms and toggles an LED.",
      "folder": "GPT12_Timer_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12",
        "GPT12_Timer_Interrupt_1",
        "IR",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "GPT12 timer interrupt",
      "name": "GPT12_Timer_Interrupt_1_KIT_TC375_LK",
      "description": "The timer T3 of the GPT12 module is configured to trigger an interrupt each 500 ms.\r\nIn its interrupt service routine, an LED is toggled.",
      "abstract": "The GPT12 module generates an interrupt each 500 ms and toggles an LED.",
      "folder": "GPT12_Timer_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12",
        "GPT12_Timer_Interrupt_1",
        "IR",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Interrupt_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "GPT12 timer interrupt",
      "name": "GPT12_Timer_Interrupt_1_KIT_TC397_TFT",
      "description": "The timer T3 of the GPT12 module is configured to trigger an interrupt each 500 ms.\r\nIn its interrupt service routine, an LED is toggled.",
      "abstract": "The GPT12 module generates an interrupt each 500 ms and toggles an LED.",
      "folder": "GPT12_Timer_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GPT12",
        "GPT12_Timer_Interrupt_1",
        "IR",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GPT12_Timer_Interrupt_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM interrupt",
      "name": "GTM_ATOM_Interrupt_1_KIT_TC275_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM ATOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_ATOM_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_Interrupt_1",
        "IR",
        "general timer",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_Interrupt_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM interrupt",
      "name": "GTM_ATOM_Interrupt_1_KIT_TC297_TFT",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM ATOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_ATOM_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_Interrupt_1",
        "IR",
        "general timer",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_Interrupt_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM interrupt",
      "name": "GTM_ATOM_Interrupt_1_KIT_TC334_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM ATOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_ATOM_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_Interrupt_1",
        "IR",
        "general timer",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM interrupt",
      "name": "GTM_ATOM_Interrupt_1_KIT_TC375_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM ATOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_ATOM_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_Interrupt_1",
        "IR",
        "general timer",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_Interrupt_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM interrupt",
      "name": "GTM_ATOM_Interrupt_1_KIT_TC397_TFT",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM ATOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_ATOM_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_Interrupt_1",
        "IR",
        "general timer",
        "interrupt",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_Interrupt_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM PWM",
      "name": "GTM_ATOM_PWM_1_KIT_TC275_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the ATOM timer of GTM.",
      "abstract": "GTM ATOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_ATOM_PWM_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_PWM_1",
        "PWM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_PWM_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM PWM",
      "name": "GTM_ATOM_PWM_1_KIT_TC297_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the ATOM timer of GTM.",
      "abstract": "GTM ATOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_ATOM_PWM_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_PWM_1",
        "PWM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_PWM_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM PWM",
      "name": "GTM_ATOM_PWM_1_KIT_TC334_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the ATOM timer of GTM.",
      "abstract": "GTM ATOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_ATOM_PWM_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_PWM_1",
        "PWM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_PWM_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM PWM",
      "name": "GTM_ATOM_PWM_1_KIT_TC375_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the ATOM timer of GTM.",
      "abstract": "GTM ATOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_ATOM_PWM_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_PWM_1",
        "PWM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_PWM_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "GTM ATOM PWM",
      "name": "GTM_ATOM_PWM_1_KIT_TC397_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the ATOM timer of GTM.",
      "abstract": "GTM ATOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_ATOM_PWM_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_ATOM_PWM_1",
        "PWM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_ATOM_PWM_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "PWM input capturing via TIM",
      "name": "GTM_TIM_Capture_1_KIT_TC275_LK",
      "description": "The TIM is used in capture mode. The data from the captured PWM signal is used to calculate the\r\nPWM signal frequency and duty cycle in software. The frequency and the duty cycle are then stored\r\nin variables.",
      "abstract": "The Timer Input Module (TIM) of the GTM is used to capture an external PWM signal and calculate the PWM signal frequency and duty cycle.",
      "folder": "GTM_TIM_Capture_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TIM_Capture_1",
        "Generic Timer Module",
        "PWM",
        "TIM",
        "Timer Input Module AURIX",
        "capture"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TIM_Capture_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "PWM input capturing via TIM",
      "name": "GTM_TIM_Capture_1_KIT_TC297_TFT",
      "description": "The TIM is used in capture mode. The data from the captured PWM signal is used to calculate the\r\nPWM signal frequency and duty cycle in software. The frequency and the duty cycle are then stored\r\nin variables.",
      "abstract": "The Timer Input Module (TIM) of the GTM is used to capture an external PWM signal and calculate the PWM signal frequency and duty cycle.",
      "folder": "GTM_TIM_Capture_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TIM_Capture_1",
        "Generic Timer Module",
        "PWM",
        "TIM",
        "Timer Input Module AURIX",
        "capture"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TIM_Capture_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "PWM input capturing via TIM",
      "name": "GTM_TIM_Capture_1_KIT_TC334_LK",
      "description": "The TIM is used in capture mode. The data from the captured PWM signal is used to calculate the\r\nPWM signal frequency and duty cycle in software. The frequency and the duty cycle are then stored\r\nin variables.",
      "abstract": "The Timer Input Module (TIM) of the GTM is used to capture an external PWM signal and calculate the PWM signal frequency and duty cycle.",
      "folder": "GTM_TIM_Capture_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TIM_Capture_1",
        "Generic Timer Module",
        "PWM",
        "TIM",
        "Timer Input Module AURIX",
        "capture"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TIM_Capture_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "PWM input capturing via TIM",
      "name": "GTM_TIM_Capture_1_KIT_TC375_LK",
      "description": "The TIM is used in capture mode. The data from the captured PWM signal is used to calculate the\r\nPWM signal frequency and duty cycle in software. The frequency and the duty cycle are then stored\r\nin variables.",
      "abstract": "The Timer Input Module (TIM) of the GTM is used to capture an external PWM signal and calculate the PWM signal frequency and duty cycle.",
      "folder": "GTM_TIM_Capture_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TIM_Capture_1",
        "Generic Timer Module",
        "PWM",
        "TIM",
        "Timer Input Module AURIX",
        "capture"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TIM_Capture_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "PWM input capturing via TIM",
      "name": "GTM_TIM_Capture_1_KIT_TC397_TFT",
      "description": "The TIM is used in capture mode. The data from the captured PWM signal is used to calculate the\r\nPWM signal frequency and duty cycle in software. The frequency and the duty cycle are then stored\r\nin variables.",
      "abstract": "The Timer Input Module (TIM) of the GTM is used to capture an external PWM signal and calculate the PWM signal frequency and duty cycle.",
      "folder": "GTM_TIM_Capture_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TIM_Capture_1",
        "Generic Timer Module",
        "PWM",
        "TIM",
        "Timer Input Module AURIX",
        "capture"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TIM_Capture_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM 3 Phase Inverter using PWM",
      "name": "GTM_TOM_3_Phase_Inverter_PWM_1_KIT_TC275_LK",
      "description": "The states of 6 pins are controlled by the PWM signals generated by the Generic Timer Module (GTM)\r\nin-built Timer Output Module (TOM). All signals are synchronous to each other, center-aligned and with\r\ndead-times (positive/negative) for the complementary pairs.",
      "abstract": "The GTM TOM is configured to generate PWM signals for two-level three phase inverter.",
      "folder": "GTM_TOM_3_Phase_Inverter_PWM_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "GTM",
        "TOM",
        "PWM",
        "Inverter",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_3_Phase_Inverter_PWM_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "GTM TOM ADC conversion triggering",
      "name": "GTM_TOM_ADC_1_KIT_TC275_LK",
      "description": "The LED is driven by pin 6 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM. The PWM duty cycle is defined by the result value of VADC.",
      "abstract": "GTM TOM is used to generate a PWM signal and is used to trigger the Versatile Analog-to-Digital Converter (VADC). Based on the read value, the intensity of an LED is driven.",
      "folder": "GTM_TOM_ADC_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_ADC_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "GTM TOM interrupt",
      "name": "GTM_TOM_Interrupt_1_KIT_TC275_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM TOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_TOM_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_Interrupt_1",
        "IR",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_Interrupt_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM interrupt",
      "name": "GTM_TOM_Interrupt_1_KIT_TC297_TFT",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM TOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_TOM_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_Interrupt_1",
        "IR",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_Interrupt_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM interrupt",
      "name": "GTM_TOM_Interrupt_1_KIT_TC334_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM TOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_TOM_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_Interrupt_1",
        "IR",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "GTM TOM interrupt",
      "name": "GTM_TOM_Interrupt_1_KIT_TC375_LK",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM TOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_TOM_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_Interrupt_1",
        "IR",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_Interrupt_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM interrupt",
      "name": "GTM_TOM_Interrupt_1_KIT_TC397_TFT",
      "description": "The Generic Timer Module triggers an interrupt every 500 ms. The state of the port pin,\r\nwhere the LED is connected, is toggled inside the Interrupt Service Routine (ISR).",
      "abstract": "The GTM TOM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "GTM_TOM_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_Interrupt_1",
        "IR",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_Interrupt_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC234_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC234_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X4 V1.0",
          "id": "KIT_AURIX_TC234_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC234_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC237_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC237_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC237_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC237_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC265_TFT",
      "description": "The LED is driven by pin 8 of the port 33. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC265_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2x5 V2.0",
          "id": "KIT_AURIX_TC265_TFT_BC-Step",
          "device_id": "TC26xD_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC265_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC26B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC275_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC275_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC275_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC275_SB",
      "description": "The LED is driven by pin 2 of the port 10. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC275_SB",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC275_SB-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC277_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC277_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC277_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC297_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC334_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC367_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC367_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC367_5V_TFT",
          "device_id": "TC36xDP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC367_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC36A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC375_LK",
      "description": "The LED is driven by pin 5 of the port 00. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC375_SB",
      "description": "The LED is driven by pin 2 of the port 10. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC375_SB",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC375_SB-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC377_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC377_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC377_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC387_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC387_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC387_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "GTM TOM PWM generation",
      "name": "GTM_TOM_PWM_1_KIT_TC397_TFT",
      "description": "The LED is driven by pin 0 of the port 13. The state of the pin is controlled by the PWM signal\r\ngenerated by the TOM timer of GTM.",
      "abstract": "GTM TOM is used to generate a PWM signal, which is driving the intensity of an LED.",
      "folder": "GTM_TOM_PWM_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "GTM_TOM_PWM_1",
        "PWM",
        "general timer",
        "timer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_GTM_TOM_PWM_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Read external device MAC address via I2C",
      "name": "I2C_Read_Ext_Device_1_KIT_TC297_TFT",
      "description": "An I2C module configured as I2C master is used to read the MAC address stored in MCP79411,\r\na Real-Time-Clock device mounted on the board KIT_AURIX_TC297_TFT_BC-Step. The AURIX\r\ndevice reads the MAC address through the I2C module and stores it into a global variable.",
      "abstract": "An I2C module configured as I2C master is used to read a register of an external device.",
      "folder": "I2C_Read_Ext_Device_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "I2C",
        "I2C_Read_Ext_Device_1",
        "MAC address",
        "Oscilloscope",
        "RTC",
        "Real-Time Clock",
        "external device"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_I2C_Read_Ext_Device_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Read external device MAC address via I2C",
      "name": "I2C_Read_Ext_Device_1_KIT_TC375_LK",
      "description": "An I2C module configured as I2C master is used to read the MAC address stored in MCP79411,\r\na Real-Time-Clock device mounted on the board KIT_AURIX_TC297_TFT_BC-Step. The AURIX\r\ndevice reads the MAC address through the I2C module and stores it into a global variable.",
      "abstract": "An I2C module configured as I2C master is used to read a register of an external device.",
      "folder": "I2C_Read_Ext_Device_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "I2C",
        "I2C_Read_Ext_Device_1",
        "MAC address",
        "Oscilloscope",
        "RTC",
        "Real-Time Clock",
        "external device"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_I2C_Read_Ext_Device_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Read external device MAC address via I2C",
      "name": "I2C_Read_Ext_Device_1_KIT_TC397_TFT",
      "description": "An I2C module configured as I2C master is used to read the MAC address stored in MCP79411,\r\na Real-Time-Clock device mounted on the board KIT_AURIX_TC297_TFT_BC-Step. The AURIX\r\ndevice reads the MAC address through the I2C module and stores it into a global variable.",
      "abstract": "An I2C module configured as I2C master is used to read a register of an external device.",
      "folder": "I2C_Read_Ext_Device_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "I2C",
        "I2C_Read_Ext_Device_1",
        "MAC address",
        "Oscilloscope",
        "RTC",
        "Real-Time Clock",
        "external device"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_I2C_Read_Ext_Device_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Interrupts prioritization",
      "name": "Interrupt_Prio_1_KIT_TC275_LK",
      "description": "Each interrupt sends a message on a terminal when the ISR starts and ends.\r\nIn this example, the interrupts are triggered by GPT12 module.",
      "abstract": "Three interrupts, with different priorities each, send a message on a terminal using UART communication.",
      "folder": "Interrupt_Prio_1_KIT_TC275_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IR",
        "Interrupt_Prio_1",
        "interrupt",
        "prioritization"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Interrupt_Prio_1_KIT_TC275_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Interrupts prioritization",
      "name": "Interrupt_Prio_1_KIT_TC297_TFT",
      "description": "Each interrupt is configured to control the state of one LED.\r\nBased on their priority, the interrupts toggle the appropriate LED.\r\nIn this example, the interrupts are triggered by GPT12 module.",
      "abstract": "Three interrupts with different priorities are used to toggle LEDs.",
      "folder": "Interrupt_Prio_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IR",
        "Interrupt_Prio_1",
        "interrupt",
        "prioritization"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Interrupt_Prio_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Interrupts prioritization",
      "name": "Interrupt_Prio_1_KIT_TC334_LK",
      "description": "Each interrupt sends a message on a terminal when the ISR starts and ends.\r\nIn this example, the interrupts are triggered by GPT12 module.",
      "abstract": "Three interrupts, with different priorities each, send a message on a terminal using UART communication.",
      "folder": "Interrupt_Prio_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IR",
        "Interrupt_Prio_1",
        "interrupt",
        "prioritization"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Interrupt_Prio_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Interrupts prioritization",
      "name": "Interrupt_Prio_1_KIT_TC375_LK",
      "description": "Each interrupt sends a message on a terminal when the ISR starts and ends.\r\nIn this example, the interrupts are triggered by GPT12 module.",
      "abstract": "Three interrupts, with different priorities each, send a message on a terminal using UART communication.",
      "folder": "Interrupt_Prio_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IR",
        "Interrupt_Prio_1",
        "interrupt",
        "prioritization"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Interrupt_Prio_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Interrupts prioritization",
      "name": "Interrupt_Prio_1_KIT_TC397_TFT",
      "description": "Each interrupt is configured to control the state of one LED.\r\nBased on their priority, the interrupts toggle the appropriate LED.\r\nIn this example, the interrupts are triggered by GPT12 module.",
      "abstract": "Three interrupts with different priorities are used to toggle LEDs.",
      "folder": "Interrupt_Prio_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IR",
        "Interrupt_Prio_1",
        "interrupt",
        "prioritization"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Interrupt_Prio_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "PWM monitor via IOM",
      "name": "IOM_PWM_Monitor_1_KIT_TC275_LK",
      "description": "The PWM signal is routed through the port to the Input Output Monitor (IOM) module.\r\nIts duty cycle is continuously compared with a threshold. If the value of the duty cycle goes\r\nbelow the threshold, an LED is switched on.",
      "abstract": "A PWM signal\u0027s duty cycle is monitored using the IOM module.",
      "folder": "IOM_PWM_Monitor_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_PWM_Monitor_1",
        "Oscilloscope",
        "PWM",
        "input",
        "monitor",
        "output",
        "period"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_PWM_Monitor_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "PWM monitor via IOM",
      "name": "IOM_PWM_Monitor_1_KIT_TC297_TFT",
      "description": "The PWM signal is routed through the port to the Input Output Monitor (IOM) module.\r\nIts duty cycle is continuously compared with a threshold. If the value of the duty cycle goes\r\nbelow the threshold, an LED is switched on.",
      "abstract": "A PWM signal\u0027s duty cycle is monitored using the IOM module.",
      "folder": "IOM_PWM_Monitor_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_PWM_Monitor_1",
        "Oscilloscope",
        "PWM",
        "input",
        "monitor",
        "output",
        "period"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_PWM_Monitor_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Comparison of signals via IOM",
      "name": "IOM_Signals_Comparison_1_KIT_TC275_LK",
      "description": "Two PWM signals are routed through the port pins to the Input Output Module (IOM) as monitor and\r\nreference respectively. The signals are continuously compared using exclusive OR. If the newly formed\r\nsignal (XOR) is in high state outside the acceptable propagation window, an LED is switched on.",
      "abstract": "Two PWM signals are compared by the IOM module.",
      "folder": "IOM_Signals_Comparison_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_Signals_Comparison_1",
        "PWM",
        "comparison",
        "duty cycle",
        "signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_Signals_Comparison_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Comparison of signals via IOM",
      "name": "IOM_Signals_Comparison_1_KIT_TC297_TFT",
      "description": "Two PWM signals are routed through the port pins to the Input Output Module (IOM) as monitor and\r\nreference respectively. The signals are continuously compared using exclusive OR. If the newly formed\r\nsignal (XOR) is in high state outside the acceptable propagation window, an LED is switched on.",
      "abstract": "Two PWM signals are compared by the IOM module.",
      "folder": "IOM_Signals_Comparison_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_Signals_Comparison_1",
        "PWM",
        "comparison",
        "duty cycle",
        "signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_Signals_Comparison_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Comparison of signals via IOM",
      "name": "IOM_Signals_Comparison_1_KIT_TC375_LK",
      "description": "Two PWM signals are routed through the port pins to the Input Output Module (IOM) as monitor and\r\nreference respectively. The signals are continuously compared using exclusive OR. If the newly formed\r\nsignal (XOR) is in high state outside the acceptable propagation window, an LED is switched on.",
      "abstract": "Two PWM signals are compared by the IOM module.",
      "folder": "IOM_Signals_Comparison_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_Signals_Comparison_1",
        "PWM",
        "comparison",
        "duty cycle",
        "signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_Signals_Comparison_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "Comparison of signals via IOM",
      "name": "IOM_Signals_Comparison_1_KIT_TC397_TFT",
      "description": "Two PWM signals are routed through the port pins to the Input Output Module (IOM) as monitor and\r\nreference respectively. The signals are continuously compared using exclusive OR. If the newly formed\r\nsignal (XOR) is in high state outside the acceptable propagation window, an LED is switched on.",
      "abstract": "Two PWM signals are compared by the IOM module.",
      "folder": "IOM_Signals_Comparison_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "IOM",
        "IOM_Signals_Comparison_1",
        "PWM",
        "comparison",
        "duty cycle",
        "signal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_IOM_Signals_Comparison_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "MCMCAN data transmission",
      "name": "MCMCAN_1_KIT_TC334_LK",
      "description": "A CAN message is sent from CAN node 0 to CAN node 1 using Loop-Back mode. After the CAN message\r\ntransmission, an interrupt is generated and an LED is turned on to confirm successful message\r\ntransmission. Once the CAN message is successfully received by the CAN node 1, an interrupt is\r\ngenerated. Inside the interrupt service routine the content of the received CAN message is compared to\r\nthe content of the transmitted CAN message. In case of a success, another LED is turned on to confirm\r\nsuccessful message reception.",
      "abstract": "MCMCAN is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "MCMCAN_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "MCMCAN data transmission",
      "name": "MCMCAN_1_KIT_TC375_LK",
      "description": "A CAN message is sent from CAN node 0 to CAN node 1 using Loop-Back mode. After the CAN message\r\ntransmission, an interrupt is generated and an LED is turned on to confirm successful message\r\ntransmission. Once the CAN message is successfully received by the CAN node 1, an interrupt is\r\ngenerated. Inside the interrupt service routine the content of the received CAN message is compared to\r\nthe content of the transmitted CAN message. In case of a success, another LED is turned on to confirm\r\nsuccessful message reception.",
      "abstract": "MCMCAN is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "MCMCAN_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "MCMCAN data transmission",
      "name": "MCMCAN_1_KIT_TC397_TFT",
      "description": "A CAN message is sent from CAN node 0 to CAN node 1 using Loop-Back mode. After the CAN message\r\ntransmission, an interrupt is generated and an LED is turned on to confirm successful message\r\ntransmission. Once the CAN message is successfully received by the CAN node 1, an interrupt is\r\ngenerated. Inside the interrupt service routine the content of the received CAN message is compared to\r\nthe content of the transmitted CAN message. In case of a success, another LED is turned on to confirm\r\nsuccessful message reception.",
      "abstract": "MCMCAN is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "MCMCAN_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "MCMCAN FD data transmission",
      "name": "MCMCAN_FD_1_KIT_TC334_LK",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode. Both CAN nodes are set\r\nto CAN Flexible Data-rate mode (CAN FD). After each CAN message transmission and successful reception,\r\nan interrupt is generated. Inside the interrupt service routine, the content of the received CAN\r\nmessage is read. In case of the successful read operation, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, the LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "MCMCAN in Flexible Data-Rate mode is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_FD_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_FD_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "MCMCAN FD data transmission",
      "name": "MCMCAN_FD_1_KIT_TC375_LK",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode. Both CAN nodes are set\r\nto CAN Flexible Data-rate mode (CAN FD). After each CAN message transmission and successful reception,\r\nan interrupt is generated. Inside the interrupt service routine, the content of the received CAN\r\nmessage is read. In case of the successful read operation, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, the LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "MCMCAN in Flexible Data-Rate mode is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_FD_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_FD_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "MCMCAN FD data transmission",
      "name": "MCMCAN_FD_1_KIT_TC397_TFT",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode. Both CAN nodes are set\r\nto CAN Flexible Data-rate mode (CAN FD). After each CAN message transmission and successful reception,\r\nan interrupt is generated. Inside the interrupt service routine, the content of the received CAN\r\nmessage is read. In case of the successful read operation, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, the LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "MCMCAN in Flexible Data-Rate mode is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MCMCAN_FD_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_FD_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "MCMCAN acceptance filtering",
      "name": "MCMCAN_Filtering_1_KIT_TC334_LK",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nEach transmitted CAN message contains a different message ID and based on the filter configuration,\r\nthe message is either accepted or rejected by CAN node 1. Messages that passed acceptance filtering\r\nare stored in RX FIFOs 0 and 1 or dedicated RX buffer based on the filter configuration. Upon storing\r\nthe messages, the interrupt service routine is called and the content of the received CAN message is\r\nread. Once the content of all the received messages is read, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, an LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "The initialization and configuration of several filter modes are used to illustrate different acceptance filtering options.",
      "folder": "MCMCAN_Filtering_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD",
        "MCMCAN_Filtering_1",
        "Filter"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_Filtering_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "MCMCAN acceptance filtering",
      "name": "MCMCAN_Filtering_1_KIT_TC375_LK",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nEach transmitted CAN message contains a different message ID and based on the filter configuration,\r\nthe message is either accepted or rejected by CAN node 1. Messages that passed acceptance filtering\r\nare stored in RX FIFOs 0 and 1 or dedicated RX buffer based on the filter configuration. Upon storing\r\nthe messages, the interrupt service routine is called and the content of the received CAN message is\r\nread. Once the content of all the received messages is read, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, an LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "The initialization and configuration of several filter modes are used to illustrate different acceptance filtering options.",
      "folder": "MCMCAN_Filtering_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD",
        "MCMCAN_Filtering_1",
        "Filter"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_Filtering_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "MCMCAN acceptance filtering",
      "name": "MCMCAN_Filtering_1_KIT_TC397_TFT",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nEach transmitted CAN message contains a different message ID and based on the filter configuration,\r\nthe message is either accepted or rejected by CAN node 1. Messages that passed acceptance filtering\r\nare stored in RX FIFOs 0 and 1 or dedicated RX buffer based on the filter configuration. Upon storing\r\nthe messages, the interrupt service routine is called and the content of the received CAN message is\r\nread. Once the content of all the received messages is read, the received data is compared to the\r\ntransmitted data. If all messages are received without any error detected, an LED is turned on to\r\nconfirm successful message reception.",
      "abstract": "The initialization and configuration of several filter modes are used to illustrate different acceptance filtering options.",
      "folder": "MCMCAN_Filtering_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "CAN",
        "MCMCAN",
        "AURIX",
        "INTERRUPT",
        "LOOP-BACK",
        "CAN FD",
        "MCMCAN_Filtering_1",
        "Filter"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MCMCAN_Filtering_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Memory access performance",
      "name": "Memory_Access_Performance_1_KIT_TC275_LK",
      "description": "A routine is implemented to execute performance measurements using the CPU performance counters.\r\nThe amount of required CPU clocks is evaluated for ten alternating write and read operations to different\r\nmemories (DSPR0, DSPR1, LMU).",
      "abstract": "Data is stored and read back from different RAM locations while the access times are monitored using the CPU performance counters.",
      "folder": "Memory_Access_Performance_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "access",
        "counter",
        "performance",
        "ram",
        "AURIX",
        "Memory_Access_Performance_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Memory_Access_Performance_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Memory access performance",
      "name": "Memory_Access_Performance_1_KIT_TC297_TFT",
      "description": "A routine is implemented to execute performance measurements using the CPU performance counters.\r\nThe amount of required CPU clocks is evaluated for ten alternating write and read operations to different\r\nmemories (DSPR0, DSPR1, LMU).",
      "abstract": "Data is stored and read back from different RAM locations while the access times are monitored using the CPU performance counters.",
      "folder": "Memory_Access_Performance_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "access",
        "counter",
        "performance",
        "ram",
        "AURIX",
        "Memory_Access_Performance_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Memory_Access_Performance_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Memory access performance",
      "name": "Memory_Access_Performance_1_KIT_TC334_LK",
      "description": "A routine is implemented to execute performance measurements using the CPU performance counters.\r\nThe amount of required CPU clocks is evaluated for ten alternating write and read operations to\r\ndifferent memories (DSPR0, LMU).",
      "abstract": "Data is stored and read back from different RAM locations while the access times are monitored using the CPU performance counters.",
      "folder": "Memory_Access_Performance_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "access",
        "counter",
        "performance",
        "ram",
        "AURIX",
        "Memory_Access_Performance_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Memory_Access_Performance_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Memory access performance",
      "name": "Memory_Access_Performance_1_KIT_TC375_LK",
      "description": "A routine is implemented to execute performance measurements using the CPU performance counters.\r\nThe amount of required CPU clocks is evaluated for ten alternating write and read operations to\r\ndifferent memories (DSPR0, DSPR1, LMU).",
      "abstract": "Data is stored and read back from different RAM locations while the access times are monitored using the CPU performance counters.",
      "folder": "Memory_Access_Performance_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "access",
        "counter",
        "performance",
        "ram",
        "AURIX",
        "Memory_Access_Performance_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Memory_Access_Performance_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Memory access performance",
      "name": "Memory_Access_Performance_1_KIT_TC397_TFT",
      "description": "A routine is implemented to execute performance measurements using the CPU performance counters.\r\nThe amount of required CPU clocks is evaluated for ten alternating write and read operations to\r\ndifferent memories (DSPR0, DSPR1, LMU).",
      "abstract": "Data is stored and read back from different RAM locations while the access times are monitored using the CPU performance counters.",
      "folder": "Memory_Access_Performance_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_AURIX_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "access",
        "counter",
        "performance",
        "ram",
        "AURIX",
        "Memory_Access_Performance_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Memory_Access_Performance_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "MPU memory protection",
      "name": "MPU_Memory_Protection_1_KIT_TC275_LK",
      "description": "The MPU module is configured to enable read/write access to the first half of an array.\r\nTo test the function of the read protection, each element of the array is read in a loop.\r\nTwo LEDs are used to indicate the progression of the CPU read accesses.\r\nWhen the loop reads the last accessible element, the first LED is turned on.\r\nThe second LED is only turned on if the CPU reads an element which should be protected.",
      "abstract": "The MPU module is used to protect part of an array from read/write accesses.",
      "folder": "MPU_Memory_Protection_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MPU_Memory_Protection_1",
        "MPU",
        "Data Protection",
        "Code Protection",
        "Memory Protection"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MPU_Memory_Protection_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MPU memory protection",
      "name": "MPU_Memory_Protection_1_KIT_TC297_TFT",
      "description": "The MPU module is configured to enable read/write access to the first half of an array.\r\nTo test the function of the read protection, each element of the array is read in a loop.\r\nTwo LEDs are used to indicate the progression of the CPU read accesses.\r\nWhen the loop reads the last accessible element, the first LED is turned on.\r\nThe second LED is only turned on if the CPU reads an element which should be protected.",
      "abstract": "The MPU module is used to protect part of an array from read/write accesses.",
      "folder": "MPU_Memory_Protection_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MPU_Memory_Protection_1",
        "MPU",
        "Data Protection",
        "Code Protection",
        "Memory Protection"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MPU_Memory_Protection_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MPU memory protection",
      "name": "MPU_Memory_Protection_1_KIT_TC334_LK",
      "description": "The MPU module is configured to enable read/write access to the first half of an array.\r\nTo test the function of the read protection, each element of the array is read in a loop.\r\nTwo LEDs are used to indicate the progression of the CPU read accesses.\r\nWhen the loop reads the last accessible element, the first LED is turned on.\r\nThe second LED is only turned on if the CPU reads an element which should be protected.",
      "abstract": "The MPU module is used to protect part of an array from read/write accesses.",
      "folder": "MPU_Memory_Protection_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MPU_Memory_Protection_1",
        "MPU",
        "Data Protection",
        "Code Protection",
        "Memory Protection"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MPU_Memory_Protection_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "MPU memory protection",
      "name": "MPU_Memory_Protection_1_KIT_TC375_LK",
      "description": "The MPU module is configured to enable read/write access to the first half of an array.\r\nTo test the function of the read protection, each element of the array is read in a loop.\r\nTwo LEDs are used to indicate the progression of the CPU read accesses.\r\nWhen the loop reads the last accessible element, the first LED is turned on.\r\nThe second LED is only turned on if the CPU reads an element which should be protected.",
      "abstract": "The MPU module is used to protect part of an array from read/write accesses.",
      "folder": "MPU_Memory_Protection_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MPU_Memory_Protection_1",
        "MPU",
        "Data Protection",
        "Code Protection",
        "Memory Protection"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MPU_Memory_Protection_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MPU memory protection",
      "name": "MPU_Memory_Protection_1_KIT_TC397_TFT",
      "description": "The MPU module is configured to enable read/write access to the first half of an array.\r\nTo test the function of the read protection, each element of the array is read in a loop.\r\nTwo LEDs are used to indicate the progression of the CPU read accesses.\r\nWhen the loop reads the last accessible element, the first LED is turned on.\r\nThe second LED is only turned on if the CPU reads an element which should be protected.",
      "abstract": "The MPU module is used to protect part of an array from read/write accesses.",
      "folder": "MPU_Memory_Protection_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MPU_Memory_Protection_1",
        "MPU",
        "Data Protection",
        "Code Protection",
        "Memory Protection"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MPU_Memory_Protection_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Memory Built-In Test via MTU",
      "name": "MTU_MBIST_1_KIT_TC275_LK",
      "description": "In this training the Memory Test Unit (MTU) is used to initialize and clear the content of an SRAM\r\nmemory including its ECC code. Also, the non destructive inversion test is performed by Memory\r\nBuilt-in-Self-Test (MBIST) to verify the content of the same SRAM memory. The SRAM of the DMA\r\n(DMARAM) is selected to be tested in this example. In order to test the faulty scenario, this training\r\nprovides the possibility to inject a single bit error in the memory. The LEDs on the board are used to\r\nsignal the correct or faulty behavior of the MBIST.",
      "abstract": "The MBIST is used to assess the state of the memory",
      "folder": "MTU_MBIST_1_KIT_TC275_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MBIST",
        "MTU_MBIST_1",
        "MTU",
        "Memory",
        "Test"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MTU_MBIST_1_KIT_TC275_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "Memory Built-In Test via MTU",
      "name": "MTU_MBIST_1_KIT_TC297_TFT",
      "description": "In this training the Memory Test Unit (MTU) is used to initialize and clear the content of an SRAM\r\nmemory including its ECC code. Also, the non destructive inversion test is performed by Memory\r\nBuilt-in-Self-Test (MBIST) to verify the content of the same SRAM memory. The SRAM of the DMA\r\n(DMARAM) is selected to be tested in this example. In order to test the faulty scenario, this training\r\nprovides the possibility to inject a single bit error in the memory. The LEDs on the board are used to\r\nsignal the correct or faulty behavior of the MBIST.",
      "abstract": "The MBIST is used to assess the state of the memory",
      "folder": "MTU_MBIST_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MBIST",
        "MTU_MBIST_1",
        "MTU",
        "Memory",
        "Test"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MTU_MBIST_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "Memory Built-In Test via MTU",
      "name": "MTU_MBIST_1_KIT_TC334_LK",
      "description": "In this training the Memory Test Unit (MTU) is used to initialize and clear the content of an SRAM\r\nmemory including its ECC code. Additionally, the Non-Destructive Test (NDT) is performed by Memory\r\nBuilt-in-Self-Test (MBIST) to verify the content of the same SRAM memory. The SRAM of the DMA\r\n(DMARAM) is selected to be tested in this example. In order to test the faulty scenario, this training\r\nprovides the possibility to inject a single bit error in the memory. The LEDs on the board are used to\r\nsignal the correct or faulty behavior of the MBIST.",
      "abstract": "The MBIST is used to assess the state of the memory",
      "folder": "MTU_MBIST_1_KIT_TC334_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MBIST",
        "MTU_MBIST_1",
        "MTU",
        "Memory",
        "Test"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MTU_MBIST_1_KIT_TC334_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "Memory Built-In Test via MTU",
      "name": "MTU_MBIST_1_KIT_TC375_LK",
      "description": "In this training the Memory Test Unit (MTU) is used to initialize and clear the content of an SRAM\r\nmemory including its ECC code. Additionally, the Non-Destructive Test (NDT) is performed by Memory\r\nBuilt-in-Self-Test (MBIST) to verify the content of the same SRAM memory. The SRAM of the DMA\r\n(DMARAM) is selected to be tested in this example. In order to test the faulty scenario, this training\r\nprovides the possibility to inject a single bit error in the memory. The LEDs on the board are used to\r\nsignal the correct or faulty behavior of the MBIST.",
      "abstract": "The MBIST is used to assess the state of the memory",
      "folder": "MTU_MBIST_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MBIST",
        "MTU_MBIST_1",
        "MTU",
        "Memory",
        "Test"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MTU_MBIST_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "Memory Built-In Test via MTU",
      "name": "MTU_MBIST_1_KIT_TC397_TFT",
      "description": "In this training the Memory Test Unit (MTU) is used to initialize and clear the content of an SRAM\r\nmemory including its ECC code. Additionally, the Non-Destructive Test (NDT) is performed by Memory\r\nBuilt-in-Self-Test (MBIST) to verify the content of the same SRAM memory. The SRAM of the DMA\r\n(DMARAM) is selected to be tested in this example. In order to test the faulty scenario, this training\r\nprovides the possibility to inject a single bit error in the memory. The LEDs on the board are used to\r\nsignal the correct or faulty behavior of the MBIST.",
      "abstract": "The MBIST is used to assess the state of the memory",
      "folder": "MTU_MBIST_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "MBIST",
        "MTU_MBIST_1",
        "MTU",
        "Memory",
        "Test"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MTU_MBIST_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2022-12-16T00:00:00.000Z"
    },
    {
      "title": "MULTICAN data transmission",
      "name": "MULTICAN_1_KIT_TC275_LK",
      "description": "A CAN message is sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nAfter the CAN message transmission, an interrupt will be generated and LED1 will\r\nbe turned on to confirm successful message transmission. Once the CAN message\r\nis successfully received by the CAN node 1, an interrupt will be generated.\r\nInside the interrupt service routine the content of the received CAN message will be\r\ncompared to the content of the transmitted CAN message. In case of a success, LED2\r\nwill be turned on to confirm successful message reception.",
      "abstract": "MULTICAN is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "MULTICAN",
        "MULTICAN_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN data transmission",
      "name": "MULTICAN_1_KIT_TC297_TFT",
      "description": "A CAN message is sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nAfter the CAN message transmission, an interrupt will be generated and LED1 will\r\nbe turned on to confirm successful message transmission. Once the CAN message\r\nis successfully received by the CAN node 1, an interrupt will be generated.\r\nInside the interrupt service routine the content of the received CAN message will be\r\ncompared to the content of the transmitted CAN message. In case of a success, LED2\r\nwill be turned on to confirm successful message reception.",
      "abstract": "MULTICAN is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "MULTICAN",
        "MULTICAN_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN FD data transmission",
      "name": "MULTICAN_FD_1_KIT_TC275_LK",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nBoth CAN nodes are set to CAN Flexible Data-rate mode (CAN FD). After each CAN message\r\ntransmission and successful reception, an interrupt is generated. Inside the interrupt service routine,\r\nthe content of the received CAN message is read. In case of the successful read operation, the\r\nreceived data is compared to the transmitted data. If all messages are received without any error\r\ndetected, the LED is turned on to confirm successful message reception.",
      "abstract": "MULTICAN in Flexible Data-Rate mode is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_FD_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "FD",
        "MULTICAN",
        "MULTICAN_FD_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_FD_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN FD data transmission",
      "name": "MULTICAN_FD_1_KIT_TC297_TFT",
      "description": "The CAN messages are sent from CAN node 0 to CAN node 1 using Loop-Back mode.\r\nBoth CAN nodes are set to CAN Flexible Data-rate mode (CAN FD). After each CAN message\r\ntransmission and successful reception, an interrupt is generated. Inside the interrupt service routine,\r\nthe content of the received CAN message is read. In case of the successful read operation, the\r\nreceived data is compared to the transmitted data. If all messages are received without any error\r\ndetected, the LED is turned on to confirm successful message reception.",
      "abstract": "MULTICAN in Flexible Data-Rate mode is used to exchange data between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_FD_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "FD",
        "MULTICAN",
        "MULTICAN_FD_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_FD_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN in GATEWAY mode using TX FIFO",
      "name": "MULTICAN_GW_TX_FIFO_1_KIT_TC275_LK",
      "description": "The CAN messages are sent from CAN node 2 over CAN bus (in case of Loop-Back\r\nmode all nodes can access the internal bus). CAN node 0 receives the transmitted\r\nmessages but also immediately gateways the received data to CAN node 1. Three\r\nmessage objects allocated to CAN node 1 define a TX FIFO buffer structure.\r\nImmediately, upon the reception of the data via gateway, CAN node 1 transmits\r\nthe received data. The data transmitted by the CAN node 1 is received by the CAN\r\nnode 3. The content of the received data will be compared to the content of the\r\ntransmitted CAN messages together with the FIFO status check and in case of success,\r\na LED is turned on to confirm successful message reception.",
      "abstract": "MULTICAN in Gateway mode is used to exchange data using a gateway with a TX FIFO structure between multiple nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_GW_TX_FIFO_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "Gateway",
        "Interrupt",
        "Loop-Back",
        "MULTICAN",
        "MULTICAN_GW_TX_FIFO_1",
        "TX FIFO"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_GW_TX_FIFO_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN in GATEWAY mode using TX FIFO",
      "name": "MULTICAN_GW_TX_FIFO_1_KIT_TC297_TFT",
      "description": "The CAN messages are sent from CAN node 2 over CAN bus (in case of Loop-Back\r\nmode all nodes can access the internal bus). CAN node 0 receives the transmitted\r\nmessages but also immediately gateways the received data to CAN node 1. Three\r\nmessage objects allocated to CAN node 1 define a TX FIFO buffer structure.\r\nImmediately, upon the reception of the data via gateway, CAN node 1 transmits\r\nthe received data. The data transmitted by the CAN node 1 is received by the CAN\r\nnode 3. The content of the received data will be compared to the content of the\r\ntransmitted CAN messages together with the FIFO status check and in case of success,\r\na LED is turned on to confirm successful message reception.",
      "abstract": "MULTICAN in Gateway mode is used to exchange data using a gateway with a TX FIFO structure between multiple nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_GW_TX_FIFO_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "CAN",
        "Gateway",
        "Interrupt",
        "Loop-Back",
        "MULTICAN",
        "MULTICAN_GW_TX_FIFO_1",
        "TX FIFO"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_GW_TX_FIFO_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN RX FIFO data transmission",
      "name": "MULTICAN_RX_FIFO_1_KIT_TC275_LK",
      "description": "The CAN messages are sent from CAN node 0 over CAN bus (in case of Loop-Back mode all nodes can access\r\nthe internal bus). CAN node 1 receives the transmitted messages and stores them inside of RX FIFO\r\nbuffer structure. Once the RX FIFO buffer threshold value has been reached, an interrupt service\r\nrequest is generated. CPU 1 handles the interrupt service request and reads the received CAN messages\r\nfrom the RX FIFO buffer. The content of the received data will be compared to the content of the\r\ntransmitted CAN messages and in case of success, an LED is turned on to confirm the message reception.",
      "abstract": "MULTICAN is used to exchange data using RX FIFO structure between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_RX_FIFO_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "CAN",
        "FIFO",
        "INTERRUPT",
        "LOOP-BACK",
        "MULTICAN",
        "MULTICAN_RX_FIFO_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_RX_FIFO_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "MULTICAN RX FIFO data transmission",
      "name": "MULTICAN_RX_FIFO_1_KIT_TC297_TFT",
      "description": "The CAN messages are sent from CAN node 0 over CAN bus (in case of Loop-Back mode all nodes can access\r\nthe internal bus). CAN node 1 receives the transmitted messages and stores them inside of RX FIFO\r\nbuffer structure. Once the RX FIFO buffer threshold value has been reached, an interrupt service\r\nrequest is generated. CPU 1 handles the interrupt service request and reads the received CAN messages\r\nfrom the RX FIFO buffer. The content of the received data will be compared to the content of the\r\ntransmitted CAN messages and in case of success, an LED is turned on to confirm the message reception.",
      "abstract": "MULTICAN is used to exchange data using RX FIFO structure between two nodes, implemented in the same device using Loop-Back mode.",
      "folder": "MULTICAN_RX_FIFO_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "CAN",
        "FIFO",
        "INTERRUPT",
        "LOOP-BACK",
        "MULTICAN",
        "MULTICAN_RX_FIFO_1",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_MULTICAN_RX_FIFO_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC275_LK",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC275_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC275_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC275_SB",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC275_SB",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC275_SB-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC277_TFT",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC277_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC277_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC297_TFT",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC375_LK",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC375_SB",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC375_SB",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC375_SB-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC377_TFT",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC377_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC377_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC387_TFT",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC387_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC387_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Multicore LED control",
      "name": "Multicore_1_KIT_TC397_TFT",
      "description": "Core 0 is switching on an LED. When the LED flag is set, Core 1 is switching off the LED.\r\nCore 2 is controlling the state of the LED flag.",
      "abstract": "One LED is controlled by using three different cores.",
      "folder": "Multicore_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "multicore",
        "LED",
        "AURIX",
        "Multicore_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Multicore_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC234_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC234_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X4 V1.0",
          "id": "KIT_AURIX_TC234_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC234_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC237_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC237_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC237_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC237_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC265_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC265_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2x5 V2.0",
          "id": "KIT_AURIX_TC265_TFT_BC-Step",
          "device_id": "TC26xD_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC265_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC26B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC275_LK",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC275_SB",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC275_SB",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC275_SB-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC277_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC277_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC277_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC334_LK",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC367_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC367_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC367_5V_TFT",
          "device_id": "TC36xDP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC367_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC36A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC375_LK",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC375_SB",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC375_SB",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC375_SB-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC377_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC377_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC377_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC387_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC387_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC387_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over DAS using OneEye",
      "name": "OneEye_DAS_Oscilloscope_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye DAS interface, a OneEye oscilloscope is created with two signals.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the DAS interface",
      "folder": "OneEye_DAS_Oscilloscope_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Oscilloscope_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Read / write variables over DAS using OneEye",
      "name": "OneEye_DAS_QuickStart_1_KIT_TC275_LK",
      "description": "After configuring the OneEye DAS interface, OneEye is used to read / write variable.",
      "abstract": "Demonstrate how to use the OneEye DAS interface to access variables",
      "folder": "OneEye_DAS_QuickStart_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Memory",
        "Read",
        "Write",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Quickstart_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Read / write variables over DAS using OneEye",
      "name": "OneEye_DAS_QuickStart_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye DAS interface, OneEye is used to read / write variable.",
      "abstract": "Demonstrate how to use the OneEye DAS interface to access variables",
      "folder": "OneEye_DAS_QuickStart_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Memory",
        "Read",
        "Write",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Quickstart_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Read / write variables over DAS using OneEye",
      "name": "OneEye_DAS_QuickStart_1_KIT_TC334_LK",
      "description": "After configuring the OneEye DAS interface, OneEye is used to read / write variable.",
      "abstract": "Demonstrate how to use the OneEye DAS interface to access variables",
      "folder": "OneEye_DAS_QuickStart_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Memory",
        "Read",
        "Write",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Quickstart_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Read / write variables over DAS using OneEye",
      "name": "OneEye_DAS_QuickStart_1_KIT_TC375_LK",
      "description": "After configuring the OneEye DAS interface, OneEye is used to read / write variable.",
      "abstract": "Demonstrate how to use the OneEye DAS interface to access variables",
      "folder": "OneEye_DAS_QuickStart_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Memory",
        "Read",
        "Write",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Quickstart_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Read / write variables over DAS using OneEye",
      "name": "OneEye_DAS_QuickStart_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye DAS interface, OneEye is used to read / write variable.",
      "abstract": "Demonstrate how to use the OneEye DAS interface to access variables",
      "folder": "OneEye_DAS_QuickStart_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Memory",
        "Read",
        "Write",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Quickstart_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Shell via DAS interface using OneEye",
      "name": "OneEye_DAS_Shell_1_KIT_TC275_LK",
      "description": "After configuring the OneEye DAS interface, the Shell from iLLDs is used to interpret and manage commands like \"info\" or \"help\".\r\nThe example creates a OneEye pipe and the corresponding DPipe that is used to interface the shell.",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. A OneEye pipe is used to interface with the Shell through the DAS interface.",
      "folder": "OneEye_DAS_Shell_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Shell",
        "Pipe",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Shell_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Shell via DAS interface using OneEye",
      "name": "OneEye_DAS_Shell_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye DAS interface, the Shell from iLLDs is used to interpret and manage commands like \"info\" or \"help\".\r\nThe example creates a OneEye pipe and the corresponding DPipe that is used to interface the shell.",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. A OneEye pipe is used to interface with the Shell through the DAS interface.",
      "folder": "OneEye_DAS_Shell_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Shell",
        "Pipe",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Shell_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Shell via DAS interface using OneEye",
      "name": "OneEye_DAS_Shell_1_KIT_TC334_LK",
      "description": "After configuring the OneEye DAS interface, the Shell from iLLDs is used to interpret and manage commands like \"info\" or \"help\".\r\nThe example creates a OneEye pipe and the corresponding DPipe that is used to interface the shell.",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. A OneEye pipe is used to interface with the Shell through the DAS interface.",
      "folder": "OneEye_DAS_Shell_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Shell",
        "Pipe",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Shell_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Shell via DAS interface using OneEye",
      "name": "OneEye_DAS_Shell_1_KIT_TC375_LK",
      "description": "After configuring the OneEye DAS interface, the Shell from iLLDs is used to interpret and manage commands like \"info\" or \"help\".\r\nThe example creates a OneEye pipe and the corresponding DPipe that is used to interface the shell.",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. A OneEye pipe is used to interface with the Shell through the DAS interface.",
      "folder": "OneEye_DAS_Shell_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Shell",
        "Pipe",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Shell_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Shell via DAS interface using OneEye",
      "name": "OneEye_DAS_Shell_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye DAS interface, the Shell from iLLDs is used to interpret and manage commands like \"info\" or \"help\".\r\nThe example creates a OneEye pipe and the corresponding DPipe that is used to interface the shell.",
      "abstract": "A Shell is used to parse a command line and call the corresponding command execution. A OneEye pipe is used to interface with the Shell through the DAS interface.",
      "folder": "OneEye_DAS_Shell_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "DAS",
        "Shell",
        "Pipe",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_DAS_Shell_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "Data multiplexer over UART using OneEye",
      "name": "OneEye_UART_Mux_1_KIT_TC275_LK",
      "description": "After configuring the OneEye UART interface, a data multiplexer is created.\r\nThe signals are updated and send periodically.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the data multiplexer over the UART (USB) interface",
      "folder": "OneEye_UART_Mux_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Multiplexer",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Mux_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Data multiplexer over UART using OneEye",
      "name": "OneEye_UART_Mux_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye UART interface, a data multiplexer is created.\r\nThe signals are updated and send periodically.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the data multiplexer over the UART (USB) interface",
      "folder": "OneEye_UART_Mux_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Multiplexer",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Mux_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Data multiplexer over UART using OneEye",
      "name": "OneEye_UART_Mux_1_KIT_TC334_LK",
      "description": "After configuring the OneEye UART interface, a data multiplexer is created.\r\nThe signals are updated and send periodically.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the data multiplexer over the UART (USB) interface",
      "folder": "OneEye_UART_Mux_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Multiplexer",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Mux_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Data multiplexer over UART using OneEye",
      "name": "OneEye_UART_Mux_1_KIT_TC375_LK",
      "description": "After configuring the OneEye UART interface, a data multiplexer is created.\r\nThe signals are updated and send periodically.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the data multiplexer over the UART (USB) interface",
      "folder": "OneEye_UART_Mux_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Multiplexer",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Mux_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Data multiplexer over UART using OneEye",
      "name": "OneEye_UART_Mux_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye UART interface, a data multiplexer is created.\r\nThe signals are updated and send periodically.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the data multiplexer over the UART (USB) interface",
      "folder": "OneEye_UART_Mux_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Multiplexer",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Mux_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over UART using OneEye",
      "name": "OneEye_UART_Oscilloscope_1_KIT_TC275_LK",
      "description": "After configuring the OneEye UART interface, a OneEye oscilloscope is created.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the UART (USB) interface",
      "folder": "OneEye_UART_Oscilloscope_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Oscilloscope_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over UART using OneEye",
      "name": "OneEye_UART_Oscilloscope_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye UART interface, a OneEye oscilloscope is created.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the UART (USB) interface",
      "folder": "OneEye_UART_Oscilloscope_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Oscilloscope_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over UART using OneEye",
      "name": "OneEye_UART_Oscilloscope_1_KIT_TC334_LK",
      "description": "After configuring the OneEye UART interface, a OneEye oscilloscope is created.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the UART (USB) interface",
      "folder": "OneEye_UART_Oscilloscope_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Oscilloscope_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over UART using OneEye",
      "name": "OneEye_UART_Oscilloscope_1_KIT_TC375_LK",
      "description": "After configuring the OneEye UART interface, a OneEye oscilloscope is created.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the UART (USB) interface",
      "folder": "OneEye_UART_Oscilloscope_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Oscilloscope_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Oscilloscope over UART using OneEye",
      "name": "OneEye_UART_Oscilloscope_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye UART interface, a OneEye oscilloscope is created.\r\nThe signals are updated and sampled every millisecond.\r\nOneEye is used to visualize the signal values.",
      "abstract": "Demonstrate how to implement the OneEye oscilloscope over the UART (USB) interface",
      "folder": "OneEye_UART_Oscilloscope_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Oscilloscope",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Oscilloscope_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Shell over UART using OneEye",
      "name": "OneEye_UART_Shell_1_KIT_TC275_LK",
      "description": "After configuring the OneEye UART interface, a OneEye shell is used to interpret and manage commands\r\nlike \"info\" or \"help\".",
      "abstract": "Demonstrate how to implement the OneEye shell over the UART (USB) interface. A Shell is used to parse a command line and call the corresponding command execution.",
      "folder": "OneEye_UART_Shell_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Shell",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Shell_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Shell over UART using OneEye",
      "name": "OneEye_UART_Shell_1_KIT_TC297_TFT",
      "description": "After configuring the OneEye UART interface, a OneEye shell is used to interpret and manage commands\r\nlike \"info\" or \"help\".",
      "abstract": "Demonstrate how to implement the OneEye shell over the UART (USB) interface. A Shell is used to parse a command line and call the corresponding command execution.",
      "folder": "OneEye_UART_Shell_1_KIT_TC297_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Shell",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Shell_1_KIT_TC297_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Shell over UART using OneEye",
      "name": "OneEye_UART_Shell_1_KIT_TC334_LK",
      "description": "After configuring the OneEye UART interface, a OneEye shell is used to interpret and manage commands\r\nlike \"info\" or \"help\".",
      "abstract": "Demonstrate how to implement the OneEye shell over the UART (USB) interface. A Shell is used to parse a command line and call the corresponding command execution.",
      "folder": "OneEye_UART_Shell_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Shell",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Shell_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Shell over UART using OneEye",
      "name": "OneEye_UART_Shell_1_KIT_TC375_LK",
      "description": "After configuring the OneEye UART interface, a OneEye shell is used to interpret and manage commands\r\nlike \"info\" or \"help\".",
      "abstract": "Demonstrate how to implement the OneEye shell over the UART (USB) interface. A Shell is used to parse a command line and call the corresponding command execution.",
      "folder": "OneEye_UART_Shell_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Shell",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Shell_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Shell over UART using OneEye",
      "name": "OneEye_UART_Shell_1_KIT_TC397_TFT",
      "description": "After configuring the OneEye UART interface, a OneEye shell is used to interpret and manage commands\r\nlike \"info\" or \"help\".",
      "abstract": "Demonstrate how to implement the OneEye shell over the UART (USB) interface. A Shell is used to parse a command line and call the corresponding command execution.",
      "folder": "OneEye_UART_Shell_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "OneEye",
        "UART",
        "USB",
        "Shell",
        "AURIX"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_OneEye_UART_Shell_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Power saving in CPU idle mode",
      "name": "PMS_Power_Down_Idle_1_KIT_TC334_LK",
      "description": "The Power Management System (PMS) allows activation of power down modes for each CPU individually\r\nin case there are no active tasks to perform and power consumption needs to be reduced.\r\nIn this example, the System Timer periodically generates interrupts (every two seconds). In the\r\nInterrupt Service Routine, the CPU0 is switched between idle mode and run mode. CPU0 toggles LED1\r\nduring run mode whereas the LED1 remains in the last toggling state while CPU0 is idling.",
      "abstract": "CPU0 switches periodically between run mode and idle mode triggered by STM timer",
      "folder": "PMS_Power_Down_Idle_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Idle_1",
        "idle",
        "power down",
        "power modes"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Idle_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Power saving in CPU idle mode",
      "name": "PMS_Power_Down_Idle_1_KIT_TC375_LK",
      "description": "The Power Management System (PMS) allows activation of power down modes for each CPU individually\r\nin case there are no active tasks to perform and power consumption needs to be reduced.\r\nIn this example, the System Timer periodically generates interrupts (every two seconds). In the\r\nInterrupt Service Routine, the CPU0 is switched between idle mode and run mode. CPU0 toggles LED1\r\nduring run mode whereas the LED1 remains in the last toggling state while CPU0 is idling.",
      "abstract": "CPU0 switches periodically between run mode and idle mode triggered by STM timer",
      "folder": "PMS_Power_Down_Idle_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Idle_1",
        "idle",
        "power down",
        "power modes"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Idle_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Power saving in CPU idle mode",
      "name": "PMS_Power_Down_Idle_1_KIT_TC397_TFT",
      "description": "The Power Management System (PMS) allows activation of power down modes for each CPU individually\r\nin case there are no active tasks to perform and power consumption needs to be reduced.\r\nIn this example, the System Timer periodically generates interrupts (every two seconds). In the\r\nInterrupt Service Routine, the CPU0 is switched between idle mode and run mode. CPU0 toggles LED D110\r\nduring run mode whereas the LED D110 remains in the last toggling state while CPU0 is idling.",
      "abstract": "CPU0 switches periodically between run mode and idle mode triggered by STM timer",
      "folder": "PMS_Power_Down_Idle_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Idle_1",
        "idle",
        "power down",
        "power modes"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Idle_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Sleep Mode",
      "name": "PMS_Power_Down_Sleep_1_KIT_TC334_LK",
      "description": "An STM timer generates an interrupt on the CPU0 every two seconds, switching the AURIX device from\r\nrun mode to sleep mode and vice versa. A GTM timer, responsible for toggling an LED, is then allowed to\r\ngo into sleep mode, thus stopping the LED from blinking. Two seconds later, the board is switched back\r\ninto run mode and the LED blinks again.",
      "abstract": "The system is set into sleep mode and it is waken up by the System Timer Module (STM) every 2 seconds.",
      "folder": "PMS_Power_Down_Sleep_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "PMS",
        "PMS_Power_Down_Sleep_1",
        "power down",
        "power modes",
        "sleep"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Sleep_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Sleep Mode",
      "name": "PMS_Power_Down_Sleep_1_KIT_TC375_LK",
      "description": "An STM timer generates an interrupt on the CPU0 every two seconds, switching the AURIX device from\r\nrun mode to sleep mode and vice versa. A GTM timer, responsible for toggling an LED, is then allowed to\r\ngo into sleep mode, thus stopping the LED from blinking. Two seconds later, the board is switched back\r\ninto run mode and the LED blinks again.",
      "abstract": "The system is set into sleep mode and it is waken up by the System Timer Module (STM) every 2 seconds.",
      "folder": "PMS_Power_Down_Sleep_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "PMS",
        "PMS_Power_Down_Sleep_1",
        "power down",
        "power modes",
        "sleep"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Sleep_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Sleep Mode",
      "name": "PMS_Power_Down_Sleep_1_KIT_TC397_TFT",
      "description": "An STM timer generates an interrupt on the CPU0 every two seconds, switching the AURIX device from\r\nrun mode to sleep mode and vice versa. A GTM timer, responsible for toggling an LED, is then allowed to\r\ngo into sleep mode, thus stopping the LED from blinking. Two seconds later, the board is switched back\r\ninto run mode and the LED blinks again.",
      "abstract": "The system is set into sleep mode and it is waken up by the System Timer Module (STM) every 2 seconds.",
      "folder": "PMS_Power_Down_Sleep_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "PMS",
        "PMS_Power_Down_Sleep_1",
        "power down",
        "power modes",
        "sleep"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Sleep_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Standby Mode",
      "name": "PMS_Power_Down_Standby_1_KIT_TC397_TFT",
      "description": "This example shows how to set the microcontroller in power saving mode standby. The standby mode\r\nis triggered via a SW request by writing into the Power Management Control and Status Register. The\r\nsystem is woken up from standby mode using PinA (port pin 14.1) and can be controlled by a terminal\r\nprogram.",
      "abstract": "Set the system to standby mode and use an external trigger signal on PinA to return to active mode.",
      "folder": "PMS_Power_Down_Standby_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_AURIX_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "PMS",
        "PMS_Power_Down_Standby_1",
        "power down",
        "power modes",
        "standby"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PMS_Power_Down_Standby_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_15_0.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "PWM controlled melody on Buzzer",
      "name": "PWM_Buzzer_1_KIT_TC297_TFT",
      "description": "The generated PWM (Pulse-Width Modulation) signal is controlled by timer TOM1 of the GTM block.\r\nThe signal drives the piezo buzzer via the pin 0 of the port 33.",
      "abstract": "The GTM unit is used to play a PWM-controlled song with a piezo buzzer.",
      "folder": "PWM_Buzzer_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "PWM",
        "PWM_Buzzer_1",
        "buzzer",
        "song"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PWM_Buzzer_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "PWM controlled melody on Buzzer",
      "name": "PWM_Buzzer_1_KIT_TC397_TFT",
      "description": "The generated PWM (Pulse-Width Modulation) signal is controlled by timer TOM1 of the GTM block.\r\nThe signal drives the piezo buzzer via the pin 0 of the port 33.",
      "abstract": "The GTM unit is used to play a PWM-controlled song with a piezo buzzer.",
      "folder": "PWM_Buzzer_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "GTM",
        "PWM",
        "PWM_Buzzer_1",
        "buzzer",
        "song"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_PWM_Buzzer_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Function running from RAM",
      "name": "RAM_Run_Function_1_KIT_TC275_LK",
      "description": "This example implements twice the same function which toggles an LED with a wait loop.\r\nOne function is implemented to be executed from SRAM and the other one from Flash memory.\r\nThe SRAM function is toggling LED1 (P00.5), while the flash function is toggling LED2 (P00.6).",
      "abstract": "A function is stored and executed from SRAM.",
      "folder": "RAM_Run_Function_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Execute",
        "Function",
        "RAM_Run_Function_1",
        "SRAM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_RAM_Run_Function_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Function running from RAM",
      "name": "RAM_Run_Function_1_KIT_TC297_TFT",
      "description": "This example implements twice the same function which toggles an LED with a wait loop.\r\nOne function is implemented to be executed from SRAM and the other one from Flash memory.\r\nThe SRAM function is toggling LED1 (P13.0), while the flash function is toggling LED2 (P13.1).",
      "abstract": "A function is stored and executed from SRAM.",
      "folder": "RAM_Run_Function_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Execute",
        "Function",
        "RAM_Run_Function_1",
        "SRAM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_RAM_Run_Function_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Function running from RAM",
      "name": "RAM_Run_Function_1_KIT_TC375_LK",
      "description": "This example implements twice the same function which toggles an LED with a wait loop.\r\nOne function is implemented to be executed from SRAM and the other one from Flash memory.\r\nThe SRAM function is toggling LED1 (P00.5), while the flash function is toggling LED2 (P00.6).",
      "abstract": "A function is stored and executed from SRAM.",
      "folder": "RAM_Run_Function_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Execute",
        "Function",
        "RAM_Run_Function_1",
        "SRAM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_RAM_Run_Function_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Function running from RAM",
      "name": "RAM_Run_Function_1_KIT_TC397_TFT",
      "description": "This example implements twice the same function which toggles an LED with a wait loop.\r\nOne function is implemented to be executed from SRAM and the other one from Flash memory.\r\nThe SRAM function is toggling LED1 (P13.0), while the flash function is toggling LED2 (P13.1).",
      "abstract": "A function is stored and executed from SRAM.",
      "folder": "RAM_Run_Function_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Execute",
        "Function",
        "RAM_Run_Function_1",
        "SRAM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_RAM_Run_Function_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Clock configuration via SCU",
      "name": "SCU_Clock_1_KIT_TC275_LK",
      "description": "The Clock Control Unit, which is part of the System Control Units (SCU), is used to configure\r\nthe PLL clock. This clock signal is routed to an external clock output pin, which can be observed\r\nwith an oscilloscope.",
      "abstract": "The clock system is configured based on a PLL frequency of 200 MHz and the clock signal is provided at an external port pin.",
      "folder": "SCU_Clock_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Oscilloscope",
        "PLL",
        "SCU",
        "SCU_Clock_1",
        "clock"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Clock_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Clock configuration via SCU",
      "name": "SCU_Clock_1_KIT_TC297_TFT",
      "description": "The Clock Control Unit, which is part of the System Control Units (SCU), is used to configure\r\nthe PLL clock. This clock signal is routed to an external clock output pin, which can be observed\r\nwith an oscilloscope.",
      "abstract": "The clock system is configured based on a PLL frequency of 200 MHz and the clock signal is provided at an external port pin.",
      "folder": "SCU_Clock_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Oscilloscope",
        "PLL",
        "SCU",
        "SCU_Clock_1",
        "clock"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Clock_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Die Temperature Sensor",
      "name": "SCU_Die_Temp_Sensor_1_KIT_TC275_LK",
      "description": "The internal Die Temperature Sensor (DTS) is continuously read in an infinite loop.\r\nWhen a new temperature result is available an interrupt service routine (ISR) is triggered.\r\nThe ISR notifies the availability of a new die temperature value by setting a flag,\r\nwhich is used to start printing the temperature via UART communication using the\r\nASCLIN module. The temperature value can be read by using a terminal program\r\nconnected to the virtual COM port of the board/kit.",
      "abstract": "The die temperature is measured by an internal sensor and printed on a terminal program",
      "folder": "SCU_Die_Temp_Sensor_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DTS",
        "Interrupt",
        "SCU",
        "SCU_Die_Temp_Sensor_1",
        "UART",
        "VCOM",
        "sensor",
        "serial monitor",
        "temperature",
        "terminal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Die_Temp_Sensor_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Die Temperature Sensor",
      "name": "SCU_Die_Temp_Sensor_1_KIT_TC297_TFT",
      "description": "The internal Die Temperature Sensor (DTS) is continuously read in an infinite loop.\r\nWhen a new temperature result is available an interrupt service routine (ISR) is triggered.\r\nThe ISR notifies the availability of a new die temperature value by setting a flag,\r\nwhich is used to start printing the temperature via UART communication using the\r\nASCLIN module. The temperature value can be read by using a terminal program\r\nconnected to the virtual COM port of the board/kit.",
      "abstract": "The die temperature is measured by an internal sensor and printed on a terminal program",
      "folder": "SCU_Die_Temp_Sensor_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DTS",
        "Interrupt",
        "SCU",
        "SCU_Die_Temp_Sensor_1",
        "UART",
        "VCOM",
        "sensor",
        "serial monitor",
        "temperature",
        "terminal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Die_Temp_Sensor_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Die Temperature Sensor",
      "name": "SCU_Die_Temp_Sensor_1_KIT_TC334_LK",
      "description": "The internal Die Temperature Sensor (DTS) is continuously read in an infinite loop.\r\nWhen a new temperature result is available an interrupt service routine (ISR) is triggered.\r\nThe ISR notifies the availability of a new die temperature value by setting a flag,\r\nwhich is used to start printing the temperature via UART communication using the\r\nASCLIN module. The temperature value can be read by using a terminal program\r\nconnected to the virtual COM port of the board/kit.",
      "abstract": "The die temperature is measured by an internal sensor and printed on a terminal program",
      "folder": "SCU_Die_Temp_Sensor_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DTS",
        "Interrupt",
        "SCU",
        "SCU_Die_Temp_Sensor_1",
        "UART",
        "VCOM",
        "sensor",
        "serial monitor",
        "temperature",
        "terminal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Die_Temp_Sensor_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Die Temperature Sensor",
      "name": "SCU_Die_Temp_Sensor_1_KIT_TC375_LK",
      "description": "The internal Die Temperature Sensor (DTS) is continuously read in an infinite loop.\r\nWhen a new temperature result is available an interrupt service routine (ISR) is triggered.\r\nThe ISR notifies the availability of a new die temperature value by setting a flag,\r\nwhich is used to start printing the temperature via UART communication using the\r\nASCLIN module. The temperature value can be read by using a terminal program\r\nconnected to the virtual COM port of the board/kit.",
      "abstract": "The die temperature is measured by an internal sensor and printed on a terminal program",
      "folder": "SCU_Die_Temp_Sensor_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DTS",
        "Interrupt",
        "SCU",
        "SCU_Die_Temp_Sensor_1",
        "UART",
        "VCOM",
        "sensor",
        "serial monitor",
        "temperature",
        "terminal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Die_Temp_Sensor_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Die Temperature Sensor",
      "name": "SCU_Die_Temp_Sensor_1_KIT_TC397_TFT",
      "description": "The internal Die Temperature Sensor (DTS) is continuously read in an infinite loop.\r\nWhen a new temperature result is available an interrupt service routine (ISR) is triggered.\r\nThe ISR notifies the availability of a new die temperature value by setting a flag,\r\nwhich is used to start printing the temperature via UART communication using the\r\nASCLIN module. The temperature value can be read by using a terminal program\r\nconnected to the virtual COM port of the board/kit.",
      "abstract": "The die temperature is measured by an internal sensor and printed on a terminal program",
      "folder": "SCU_Die_Temp_Sensor_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "DTS",
        "Interrupt",
        "SCU",
        "SCU_Die_Temp_Sensor_1",
        "UART",
        "VCOM",
        "sensor",
        "serial monitor",
        "temperature",
        "terminal"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Die_Temp_Sensor_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Emergency Stop via SCU",
      "name": "SCU_Emergency_Stop_1_KIT_TC275_LK",
      "description": "The LED1, which is driven by the port pin P00.5, is blinking until an external signal\r\ntriggers an emergency stop and sets the pin to emergency stop mode.",
      "abstract": "This example shows how to trigger an emergency stop via an external signal and how port pins can be set to a defined state in this case.",
      "folder": "SCU_Emergency_Stop_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Emergency_Stop_1",
        "SMU",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Emergency_Stop_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Emergency Stop via SCU",
      "name": "SCU_Emergency_Stop_1_KIT_TC297_TFT",
      "description": "The LED D107, which is driven by the port pin P13.0, is blinking until an external signal\r\ntriggers an emergency stop and sets the pin to emergency stop mode.",
      "abstract": "This example shows how to trigger an emergency stop via an external signal and how port pins can be set to a defined state in this case.",
      "folder": "SCU_Emergency_Stop_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Emergency_Stop_1",
        "SMU",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Emergency_Stop_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Emergency Stop via SCU",
      "name": "SCU_Emergency_Stop_1_KIT_TC334_LK",
      "description": "The LED1, which is driven by the port pin P00.5, is blinking until an external signal triggers an\r\nemergency stop and sets the pin to emergency stop mode.",
      "abstract": "This example shows how to trigger an emergency stop via an external signal and how port pins can be set to a defined state in this case.",
      "folder": "SCU_Emergency_Stop_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Emergency_Stop_1",
        "SMU",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Emergency_Stop_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Emergency Stop via SCU",
      "name": "SCU_Emergency_Stop_1_KIT_TC375_LK",
      "description": "The LED1, which is driven by the port pin P00.5, is blinking until an external signal triggers an\r\nemergency stop and sets the pin to emergency stop mode.",
      "abstract": "This example shows how to trigger an emergency stop via an external signal and how port pins can be set to a defined state in this case.",
      "folder": "SCU_Emergency_Stop_1_KIT_TC375_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Emergency_Stop_1",
        "SMU",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Emergency_Stop_1_KIT_TC375_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Emergency Stop via SCU",
      "name": "SCU_Emergency_Stop_1_KIT_TC397_TFT",
      "description": "The LED D107, which is driven by the port pin P13.0, is blinking until an external signal\r\ntriggers an emergency stop and sets the pin to emergency stop mode.",
      "abstract": "This example shows how to trigger an emergency stop via an external signal and how port pins can be set to a defined state in this case.",
      "folder": "SCU_Emergency_Stop_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Emergency_Stop_1",
        "SMU",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Emergency_Stop_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Power saving in CPU idle mode",
      "name": "SCU_Power_Down_Idle_1_KIT_TC275_LK",
      "description": "The Power Management scheme allows activation of power down modes for each CPU individually\r\nin case there are no active tasks to perform and power consumption needs to be reduced.\r\nIn this example, the System Timer periodically generates interrupts (every two seconds). In the\r\nInterrupt Service Routine, the CPU0 is switched between idle mode and run mode. CPU0 toggles LED1\r\nduring run mode whereas the LED1 remains in the last toggling state while CPU0 is idling.",
      "abstract": "CPU0 switches periodically between run mode and idle mode triggered by STM timer",
      "folder": "SCU_Power_Down_Idle_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Idle_1",
        "idle",
        "power down",
        "power modes"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Idle_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Power saving in CPU idle mode",
      "name": "SCU_Power_Down_Idle_1_KIT_TC297_TFT",
      "description": "The Power Management scheme allows activation of power down modes for each CPU individually\r\nin case there are no active tasks to perform and power consumption needs to be reduced.\r\nIn this example, the System Timer periodically generates interrupts (every two seconds). In the\r\nInterrupt Service Routine, the CPU0 is switched between idle mode and run mode. CPU0 toggles LED D110\r\nduring run mode whereas the LED D110 remains in the last toggling state while CPU0 is idling.",
      "abstract": "CPU0 switches periodically between run mode and idle mode triggered by STM timer",
      "folder": "SCU_Power_Down_Idle_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Idle_1",
        "idle",
        "power down",
        "power modes"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Idle_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Sleep Mode",
      "name": "SCU_Power_Down_Sleep_1_KIT_TC275_LK",
      "description": "An STM timer generates an interrupt on the CPU0 every two seconds, switching the AURIX device from\r\nrun mode to sleep mode and vice versa. A GTM timer, responsible for toggling an LED, is then allowed to\r\ngo into sleep mode, thus stopping the LED from blinking. Two seconds later, the board is switched back\r\ninto run mode and the LED blinks again.",
      "abstract": "The system is set into sleep mode and it is waken up by the System Timer Module (STM) every 2 seconds.",
      "folder": "SCU_Power_Down_Sleep_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Sleep_1",
        "power down",
        "power modes",
        "sleep"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Sleep_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Sleep Mode",
      "name": "SCU_Power_Down_Sleep_1_KIT_TC297_TFT",
      "description": "An STM timer generates an interrupt on the CPU0 every two seconds, switching the AURIX device from\r\nrun mode to sleep mode and vice versa. A GTM timer, responsible for toggling an LED, is then allowed to\r\ngo into sleep mode, thus stopping the LED from blinking. Two seconds later, the board is switched back\r\ninto run mode and the LED blinks again.",
      "abstract": "The system is set into sleep mode and it is waken up by the System Timer Module (STM) every 2 seconds.",
      "folder": "SCU_Power_Down_Sleep_1_KIT_TC297_TFT",
      "version": "V1.0.5",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Sleep_1",
        "power down",
        "power modes",
        "sleep"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Sleep_1_KIT_TC297_TFT-TR-v01_00_05-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Standby Mode",
      "name": "SCU_Power_Down_Standby_1_KIT_TC275_LK",
      "description": "This example shows how to set the microcontroller in power saving mode standby. The standby mode\r\nis triggered via a SW request by writing into the Power Management Control and Status Register. The\r\nsystem is woken up from standby mode using PinA (port pin 14.1) and can be controlled by a terminal\r\nprogram.",
      "abstract": "Set the system to standby mode and use an external trigger signal on PinA to return to active mode.",
      "folder": "SCU_Power_Down_Standby_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Standby_1",
        "power down",
        "power modes",
        "standby"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Standby_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Power Saving in Standby Mode",
      "name": "SCU_Power_Down_Standby_1_KIT_TC297_TFT",
      "description": "This example shows how to set the microcontroller in power saving mode standby. The standby mode\r\nis triggered via a SW request by writing into the Power Management Control and Status Register. The\r\nsystem is woken up from standby mode using PinA (port pin 14.1) and can be controlled by a terminal\r\nprogram.",
      "abstract": "Set the system to standby mode and use an external trigger signal on PinA to return to active mode.",
      "folder": "SCU_Power_Down_Standby_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Power_Down_Standby_1",
        "power down",
        "power modes",
        "standby"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Power_Down_Standby_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "Detection of reset type",
      "name": "SCU_Reset_Detection_1_KIT_TC275_LK",
      "description": "The AURIX� TC2xx devices can be reset by various reset sources.\r\nThe application software is able to determine the source of the last reset based on a routine\r\nthat evaluates the related reset special function registers. According to the type of reset,\r\none or two LEDs are switched on.",
      "abstract": "This example shows how to detect the source of the last reset (power-on reset, watchdog reset, etc.)",
      "folder": "SCU_Reset_Detection_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Reset_Detection_1",
        "reset detection",
        "reset type"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Reset_Detection_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Detection of reset type",
      "name": "SCU_Reset_Detection_1_KIT_TC297_TFT",
      "description": "The AURIX TC2xx devices can be reset by various reset sources.\r\nThe application software is able to determine the source of the last reset based on a routine\r\nthat evaluates the related reset special function register. According to the type of reset,\r\none of three LEDs is switched on.",
      "abstract": "This example shows how to detect the source of the last reset (power-on reset, watchdog reset, etc.)",
      "folder": "SCU_Reset_Detection_1_KIT_TC297_TFT",
      "version": "V1.1.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Reset_Detection_1",
        "reset detection",
        "reset type"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Reset_Detection_1_KIT_TC297_TFT-TR-v01_01_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Detection of reset type",
      "name": "SCU_Reset_Detection_1_KIT_TC334_LK",
      "description": "The AURIX TC3xx devices can be reset by various reset sources.\r\nThe application software is able to determine the source of the last reset based on a routine that\r\nevaluates the related reset special function registers.\r\nAccording to the type of reset, one or two LEDs are switched on.",
      "abstract": "This example shows how to detect the source of the last reset (power-on reset, watchdog reset, etc.)",
      "folder": "SCU_Reset_Detection_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Reset_Detection_1",
        "reset detection",
        "reset type"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Reset_Detection_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Detection of reset type",
      "name": "SCU_Reset_Detection_1_KIT_TC375_LK",
      "description": "The AURIX TC3xx devices can be reset by various reset sources.\r\nThe application software is able to determine the source of the last reset based on a routine that\r\nevaluates the related reset special function registers.\r\nAccording to the type of reset, one or two LEDs are switched on.",
      "abstract": "This example shows how to detect the source of the last reset (power-on reset, watchdog reset, etc.)",
      "folder": "SCU_Reset_Detection_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Reset_Detection_1",
        "reset detection",
        "reset type"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Reset_Detection_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Detection of reset type",
      "name": "SCU_Reset_Detection_1_KIT_TC397_TFT",
      "description": "The AURIX TC3xx devices can be reset by various reset sources.\r\nThe application software is able to determine the source of the last reset based on a routine\r\nthat evaluates the related reset special function register. According to the type of reset,\r\none of three LEDs is switched on.",
      "abstract": "This example shows how to detect the source of the last reset (power-on reset, watchdog reset, etc.)",
      "folder": "SCU_Reset_Detection_1_KIT_TC397_TFT",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "SCU_Reset_Detection_1",
        "reset detection",
        "reset type"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SCU_Reset_Detection_1_KIT_TC397_TFT-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Emergency stop triggered by an SMU alarm",
      "name": "SMU_Emergency_Stop_Alarm_1_KIT_TC275_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED is turned on inside the Interrupt Service Routine and the port\r\nemergency stop is activated.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt and a port emergency stop. The interrupt turns on an LED.",
      "folder": "SMU_Emergency_Stop_Alarm_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Emergency_Stop_Alarm_1",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Emergency_Stop_Alarm_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Emergency stop triggered by an SMU alarm",
      "name": "SMU_Emergency_Stop_Alarm_1_KIT_TC297_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED is turned on inside the Interrupt Service Routine and the port\r\nemergency stop is activated.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt and a port emergency stop. The interrupt turns on an LED.",
      "folder": "SMU_Emergency_Stop_Alarm_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Emergency_Stop_Alarm_1",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Emergency_Stop_Alarm_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Emergency stop triggered by an SMU alarm",
      "name": "SMU_Emergency_Stop_Alarm_1_KIT_TC334_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED is turned on inside the Interrupt Service Routine and the port\r\nemergency stop is activated.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt and a port emergency stop. The interrupt turns on an LED.",
      "folder": "SMU_Emergency_Stop_Alarm_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Emergency_Stop_Alarm_1",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Emergency_Stop_Alarm_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Emergency stop triggered by an SMU alarm",
      "name": "SMU_Emergency_Stop_Alarm_1_KIT_TC375_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED is turned on inside the Interrupt Service Routine and the port\r\nemergency stop is activated.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt and a port emergency stop. The interrupt turns on an LED.",
      "folder": "SMU_Emergency_Stop_Alarm_1_KIT_TC375_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Emergency_Stop_Alarm_1",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Emergency_Stop_Alarm_1_KIT_TC375_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Emergency stop triggered by an SMU alarm",
      "name": "SMU_Emergency_Stop_Alarm_1_KIT_TC397_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED is turned on inside the Interrupt Service Routine and the port\r\nemergency stop is activated.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt and a port emergency stop. The interrupt turns on an LED.",
      "folder": "SMU_Emergency_Stop_Alarm_1_KIT_TC397_TFT",
      "version": "V1.0.4",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Emergency_Stop_Alarm_1",
        "alarm",
        "emergency stop"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Emergency_Stop_Alarm_1_KIT_TC397_TFT-TR-v01_00_04-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Fault signaling via a port pin",
      "name": "SMU_Fault_Signaling_1_KIT_TC275_LK",
      "description": "After initialization the FSP is set to fault free state, indicated by a high level of the\r\nport pin P33.8. After some time, the software triggers an alarm that leads to the FSP fault state,\r\nthus the port pin P33.8 switches to low level state.\r\nAfter 500 ms from triggering the alarm, the FSP release command is sent by software.\r\nThe minimum fault state time is configured to 2 s. Therefore the port pin P33.8 state switches to\r\nhigh level again after 1500 ms.",
      "abstract": "The Fault Signaling Protocol (FSP) pin is configured by the SMU to signal a fault by changing the state of the port pin P33.8.",
      "folder": "SMU_Fault_Signaling_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "FSP",
        "Fault Signaling",
        "SMU",
        "SMU_Fault_Signaling_1",
        "Safety"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Fault_Signaling_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Fault signaling via a port pin",
      "name": "SMU_Fault_Signaling_1_KIT_TC297_TFT",
      "description": "After initialization the FSP is set to fault free state, indicated by a high level of the\r\nport pin P33.8. After some time, the software triggers an alarm that leads to the FSP fault state,\r\nthus the port pin P33.8 switches to low level state.\r\nAfter 500 ms from triggering the alarm, the FSP release command is sent by software.\r\nThe minimum fault state time is configured to 2 s. Therefore the port pin P33.8 state switches to\r\nhigh level again after 1500 ms.",
      "abstract": "The Fault Signaling Protocol (FSP) pin is configured by the SMU to signal a fault by changing the state of the port pin P33.8.",
      "folder": "SMU_Fault_Signaling_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "FSP",
        "Fault Signaling",
        "SMU",
        "SMU_Fault_Signaling_1",
        "Safety"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Fault_Signaling_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Fault signaling via a port pin",
      "name": "SMU_Fault_Signaling_1_KIT_TC334_LK",
      "description": "During initialization the FSP is set to fault free state, indicated by a high level of the port pin\r\nP33.8. The software triggers an alarm that leads to the FSP fault state, thus the port pin P33.8\r\nswitches to low level state. After one second from triggering the alarm, the FSP release command\r\nis sent by software. The port pin P33.8 state switches to high level after the command is sent.",
      "abstract": "The Fault Signaling Protocol (FSP) pin is configured by the SMU to signal a fault by changing the state of the port pin P33.8.",
      "folder": "SMU_Fault_Signaling_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "FSP",
        "Fault Signaling",
        "SMU",
        "SMU_Fault_Signaling_1",
        "Safety"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Fault_Signaling_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Fault signaling via a port pin",
      "name": "SMU_Fault_Signaling_1_KIT_TC375_LK",
      "description": "During initialization the FSP is set to fault free state, indicated by a high level of the port pin\r\nP33.8. The software triggers an alarm that leads to the FSP fault state, thus the port pin P33.8\r\nswitches to low level state. After one second from triggering the alarm, the FSP release command\r\nis sent by software. The port pin P33.8 state switches to high level after the command is sent.",
      "abstract": "The Fault Signaling Protocol (FSP) pin is configured by the SMU to signal a fault by changing the state of the port pin P33.8.",
      "folder": "SMU_Fault_Signaling_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "FSP",
        "Fault Signaling",
        "SMU",
        "SMU_Fault_Signaling_1",
        "Safety"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Fault_Signaling_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "Fault signaling via a port pin",
      "name": "SMU_Fault_Signaling_1_KIT_TC397_TFT",
      "description": "During initialization the FSP is set to fault free state, indicated by a high level of the port pin\r\nP33.8. The software triggers an alarm that leads to the FSP fault state, thus the port pin P33.8\r\nswitches to low level state. After one second from triggering the alarm, the FSP release command\r\nis sent by software. The port pin P33.8 state switches to high level after the command is sent.",
      "abstract": "The Fault Signaling Protocol (FSP) pin is configured by the SMU to signal a fault by changing the state of the port pin P33.8.",
      "folder": "SMU_Fault_Signaling_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "FSP",
        "Fault Signaling",
        "SMU",
        "SMU_Fault_Signaling_1",
        "Safety"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Fault_Signaling_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt triggered by an SMU alarm",
      "name": "SMU_IR_Alarm_1_KIT_TC275_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED will be turned on inside the Interrupt Service Routine.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt. The interrupt turns on an LED.",
      "folder": "SMU_IR_Alarm_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_IR_Alarm_1",
        "alarm",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_IR_Alarm_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt triggered by an SMU alarm",
      "name": "SMU_IR_Alarm_1_KIT_TC297_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED will be turned on inside the Interrupt Service Routine.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt. The interrupt turns on an LED.",
      "folder": "SMU_IR_Alarm_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_IR_Alarm_1",
        "alarm",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_IR_Alarm_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "Interrupt triggered by an SMU alarm",
      "name": "SMU_IR_Alarm_1_KIT_TC334_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED will be turned on inside the Interrupt Service Routine.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt. The interrupt turns on an LED.",
      "folder": "SMU_IR_Alarm_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_IR_Alarm_1",
        "alarm",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_IR_Alarm_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Interrupt triggered by an SMU alarm",
      "name": "SMU_IR_Alarm_1_KIT_TC375_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED will be turned on inside the Interrupt Service Routine.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt. The interrupt turns on an LED.",
      "folder": "SMU_IR_Alarm_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_IR_Alarm_1",
        "alarm",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_IR_Alarm_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt triggered by an SMU alarm",
      "name": "SMU_IR_Alarm_1_KIT_TC397_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger an interrupt if an internal software alarm\r\noccurs. In case of an alarm, an LED will be turned on inside the Interrupt Service Routine.",
      "abstract": "The SMU triggers an alarm, which has, as preconfigured reaction, an interrupt. The interrupt turns on an LED.",
      "folder": "SMU_IR_Alarm_1_KIT_TC397_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_IR_Alarm_1",
        "alarm",
        "interrupt"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_IR_Alarm_1_KIT_TC397_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-09-29T00:00:00.000Z"
    },
    {
      "title": "Reset triggered by an SMU alarm",
      "name": "SMU_Reset_Alarm_1_KIT_TC275_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger a reset if an internal software alarm occurs.",
      "abstract": "The SMU triggers an alarm, which resets the device as preconfigured reaction.",
      "folder": "SMU_Reset_Alarm_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Reset_Alarm_1",
        "alarm",
        "reset"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Reset_Alarm_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Reset triggered by an SMU alarm",
      "name": "SMU_Reset_Alarm_1_KIT_TC297_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger a reset if an internal software alarm occurs.",
      "abstract": "The SMU triggers an alarm, which resets the device as preconfigured reaction.",
      "folder": "SMU_Reset_Alarm_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Reset_Alarm_1",
        "alarm",
        "reset"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Reset_Alarm_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Reset triggered by an SMU alarm",
      "name": "SMU_Reset_Alarm_1_KIT_TC334_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger a reset if an internal software alarm occurs.",
      "abstract": "The SMU triggers an alarm, which resets the device as preconfigured reaction.",
      "folder": "SMU_Reset_Alarm_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Reset_Alarm_1",
        "alarm",
        "reset"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Reset_Alarm_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Reset triggered by an SMU alarm",
      "name": "SMU_Reset_Alarm_1_KIT_TC375_LK",
      "description": "The Safety Management Unit (SMU) is configured to trigger a reset if an internal software alarm occurs.",
      "abstract": "The SMU triggers an alarm, which resets the device as preconfigured reaction.",
      "folder": "SMU_Reset_Alarm_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Reset_Alarm_1",
        "alarm",
        "reset"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Reset_Alarm_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Reset triggered by an SMU alarm",
      "name": "SMU_Reset_Alarm_1_KIT_TC397_TFT",
      "description": "The Safety Management Unit (SMU) is configured to trigger a reset if an internal software alarm occurs.",
      "abstract": "The SMU triggers an alarm, which resets the device as preconfigured reaction.",
      "folder": "SMU_Reset_Alarm_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SMU",
        "SMU_Reset_Alarm_1",
        "alarm",
        "reset"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SMU_Reset_Alarm_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI communication via QSPI",
      "name": "SPI_CPU_1_KIT_TC275_LK",
      "description": "QSPI1 is configured in master mode and used to send five bytes to QSPI3 configured in slave mode.\r\nThe received data is read by the CPU and compared against the transmitted data. Port pin 00.5,\r\nto which LED1 is connected, indicates the successful transfer.",
      "abstract": "A QSPI module configured as SPI master sends five bytes to another QSPI module which is configured as SPI slave.",
      "folder": "SPI_CPU_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "Master",
        "QSPI",
        "SPI",
        "SPI_CPU_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_CPU_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI communication via QSPI",
      "name": "SPI_CPU_1_KIT_TC297_TFT",
      "description": "QSPI2 is configured in master mode and used to send five bytes to QSPI3 configured in slave mode.\r\nThe received data is read by the CPU and compared against the transmitted data. Port pin 13.3,\r\nto which LED D110 is connected, indicates the successful transfer.",
      "abstract": "A QSPI module configured as SPI master sends five bytes to another QSPI module which is configured as SPI slave.",
      "folder": "SPI_CPU_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "Master",
        "QSPI",
        "SPI",
        "SPI_CPU_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_CPU_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "SPI communication via QSPI",
      "name": "SPI_CPU_1_KIT_TC334_LK",
      "description": "QSPI1 is configured in master mode and used to send five bytes to QSPI2 configured in slave mode.\r\nThe received data is read by the CPU and compared against the transmitted data. Port pin 00.5,\r\nto which LED1 is connected, indicates the successful transfer.",
      "abstract": "A QSPI module configured as SPI master sends five bytes to another QSPI module which is configured as SPI slave.",
      "folder": "SPI_CPU_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "Master",
        "QSPI",
        "SPI",
        "SPI_CPU_1",
        "Slave",
        "MikroBus"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_CPU_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "SPI communication via QSPI",
      "name": "SPI_CPU_1_KIT_TC375_LK",
      "description": "QSPI1 is configured in master mode and used to send five bytes to QSPI2 configured in slave mode.\r\nThe received data is read by the CPU and compared against the transmitted data. Port pin 00.5,\r\nto which LED1 is connected, indicates the successful transfer.",
      "abstract": "A QSPI module configured as SPI master sends five bytes to another QSPI module which is configured as SPI slave.",
      "folder": "SPI_CPU_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "Master",
        "QSPI",
        "SPI",
        "SPI_CPU_1",
        "Slave",
        "MikroBus"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_CPU_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI communication via QSPI",
      "name": "SPI_CPU_1_KIT_TC397_TFT",
      "description": "QSPI2 is configured in master mode and used to send five bytes to QSPI3 configured in slave mode.\r\nThe received data is read by the CPU and compared against the transmitted data. Port pin 13.3,\r\nto which LED D110 is connected, indicates the successful transfer.",
      "abstract": "A QSPI module configured as SPI master sends five bytes to another QSPI module which is configured as SPI slave.",
      "folder": "SPI_CPU_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "Master",
        "QSPI",
        "SPI",
        "SPI_CPU_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_CPU_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "SPI data communication via DMA",
      "name": "SPI_DMA_1_KIT_TC275_LK",
      "description": "This example implements an SPI full duplex communication.\r\nQSPI1 is configured as an SPI master and QSPI3 is configured as an SPI slave. Both master and slave exchange eight bytes of data.\r\nFour DMA channels are used to enable data transfer between RAM and QSPI FIFOs without CPU intervention:\r\nDMA channel 1 is configured as SPI master Tx\r\nDMA channel 2 is configured as SPI master Rx\r\nDMA channel 3 is configured as SPI slave Tx\r\nDMA channel 4 is configured as SPI slave Rx\r\nAn LED is used to signal the successful data communication.",
      "abstract": "QSPI is used to conduct SPI Master Slave communication using the DMA module.",
      "folder": "SPI_DMA_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "DMA",
        "Master",
        "SPI",
        "SPI_DMA_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_DMA_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI data communication via DMA",
      "name": "SPI_DMA_1_KIT_TC297_TFT",
      "description": "This example implements an SPI full duplex communication.\r\nQSPI2 is configured as an SPI master and QSPI3 is configured as an SPI slave. Both master and slave exchange eight bytes of data.\r\nFour DMA channels are used to enable data transfer between RAM and QSPI FIFOs without CPU intervention:\r\nDMA channel 1 is configured as SPI master Tx\r\nDMA channel 2 is configured as SPI master Rx\r\nDMA channel 3 is configured as SPI slave Tx\r\nDMA channel 4 is configured as SPI slave Rx\r\nAn LED is used to signal the successful data communication.",
      "abstract": "QSPI is used to conduct SPI Master Slave communication using the DMA module.",
      "folder": "SPI_DMA_1_KIT_TC297_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "DMA",
        "Master",
        "SPI",
        "SPI_DMA_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_DMA_1_KIT_TC297_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "SPI data communication via DMA",
      "name": "SPI_DMA_1_KIT_TC334_LK",
      "description": "This example implements an SPI full duplex communication.\r\nQSPI1 is configured as an SPI master and QSPI2 is configured as an SPI slave. Both master and slave\r\nexchange eight bytes of data.\r\nFour DMA channels are used to enable data transfer between RAM and QSPI FIFOs without CPU intervention:\r\nDMA channel 1 is configured as SPI master Tx\r\nDMA channel 2 is configured as SPI master Rx\r\nDMA channel 3 is configured as SPI slave Tx\r\nDMA channel 4 is configured as SPI slave Rx\r\nAn LED is used to signal the successful data communication.",
      "abstract": "QSPI is used to conduct SPI Master Slave communication using the DMA module.",
      "folder": "SPI_DMA_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "DMA",
        "Master",
        "SPI",
        "SPI_DMA_1",
        "Slave",
        "MikroBus"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_DMA_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-03-28T00:00:00.000Z"
    },
    {
      "title": "SPI data communication via DMA",
      "name": "SPI_DMA_1_KIT_TC375_LK",
      "description": "This example implements an SPI full duplex communication.\r\nQSPI1 is configured as an SPI master and QSPI2 is configured as an SPI slave. Both master and slave\r\nexchange eight bytes of data.\r\nFour DMA channels are used to enable data transfer between RAM and QSPI FIFOs without CPU intervention:\r\nDMA channel 1 is configured as SPI master Tx\r\nDMA channel 2 is configured as SPI master Rx\r\nDMA channel 3 is configured as SPI slave Tx\r\nDMA channel 4 is configured as SPI slave Rx\r\nAn LED is used to signal the successful data communication.",
      "abstract": "QSPI is used to conduct SPI Master Slave communication using the DMA module.",
      "folder": "SPI_DMA_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "DMA",
        "Master",
        "SPI",
        "SPI_DMA_1",
        "Slave",
        "MikroBus"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_DMA_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "SPI data communication via DMA",
      "name": "SPI_DMA_1_KIT_TC397_TFT",
      "description": "This example implements an SPI full duplex communication.\r\nQSPI2 is configured as an SPI master and QSPI3 is configured as an SPI slave. Both master and slave exchange eight bytes of data.\r\nFour DMA channels are used to enable data transfer between RAM and QSPI FIFOs without CPU intervention:\r\nDMA channel 1 is configured as SPI master Tx\r\nDMA channel 2 is configured as SPI master Rx\r\nDMA channel 3 is configured as SPI slave Tx\r\nDMA channel 4 is configured as SPI slave Rx\r\nAn LED is used to signal the successful data communication.",
      "abstract": "QSPI is used to conduct SPI Master Slave communication using the DMA module.",
      "folder": "SPI_DMA_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Communication",
        "DMA",
        "Master",
        "SPI",
        "SPI_DMA_1",
        "Slave"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_DMA_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2020-12-18T00:00:00.000Z"
    },
    {
      "title": "QSPI communication with TLF35584",
      "name": "SPI_TLF_1_KIT_TC397_TFT",
      "description": "QSPI2 is configured in master mode and used to send data frames to TLF35584 device via SPI protocol.\r\nThe TLF35584 device is set to the NORMAL state and, in case of success, the LED D104 is turned on.\r\nThis training focuses on the SPI communication between QSPI module and TLF35548 device.\r\nTypical application use case and the features of the TLF35584 device are not covered by this training.",
      "abstract": "A QSPI module configured as SPI master communicates with the TLF35584 device via SPI protocol.",
      "folder": "SPI_TLF_1_KIT_TC397_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SPI",
        "QSPI",
        "TLF",
        "TLF35584",
        "SPI_TLF_1"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_SPI_TLF_1_KIT_TC397_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2023-03-30T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC234_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC234_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X4 V1.0",
          "id": "KIT_AURIX_TC234_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC234_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC237_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC237_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC237_TFT_AC-Step",
          "device_id": "TC23xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC237_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC23A_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC265_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC265_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2x5 V2.0",
          "id": "KIT_AURIX_TC265_TFT_BC-Step",
          "device_id": "TC26xD_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC265_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC26B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC275_LK",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC275_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC275_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC275_SB",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC275_SB",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_AURIX_TC275_ARD_SB",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC275_SB-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC277_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC277_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC277_TFT_DC-Step",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC277_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC297_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC334_LK",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC367_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC367_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC367_5V_TFT",
          "device_id": "TC36xDP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC367_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC36A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC375_LK",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC375_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC375_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC375_SB",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC375_SB",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "hitex ShieldBuddy",
          "id": "KIT_A2G_TC375_ARD_SB",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC375_SB-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC377_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC377_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC377_5V_TFT",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC377_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC387_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC387_TFT",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC387_5V_TFT",
          "device_id": "TC38xQP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC387_TFT-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC38A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Interrupt generation via STM trigger",
      "name": "STM_Interrupt_1_KIT_TC397_TFT",
      "description": "The System Timer (STM) module counts up to a configured compare value, when it reaches the specific\r\nvalue, it triggers an interrupt and resets its counter value. The value is set to trigger the interrupt\r\nevery 500 ms; at each interrupt an LED is toggled.",
      "abstract": "The STM is configured to trigger an interrupt every 500 ms. The interrupt toggles an LED.",
      "folder": "STM_Interrupt_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "Interrupt",
        "LED",
        "STM",
        "STM_Interrupt_1",
        "blink"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_Interrupt_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "System time via STM",
      "name": "STM_System_Time_1_KIT_TC275_LK",
      "description": "The System Timer (STM) module counts the number of ticks since the last Application Reset.\r\nThis number is used to calculate the current system time in day, hours, minutes and seconds.",
      "abstract": "The STM module is used to get the current system time (days:hours:minutes:seconds). The time is stored in a structure.",
      "folder": "STM_System_Time_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "STM",
        "STM_System_Time_1",
        "System timer",
        "Time"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_System_Time_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "System time via STM",
      "name": "STM_System_Time_1_KIT_TC297_TFT",
      "description": "The System Timer (STM) module counts the number of ticks since the last Application Reset.\r\nThis number is used to calculate the current system time in day, hours, minutes and seconds.",
      "abstract": "The STM module is used to get the current system time (days:hours:minutes:seconds). The time is stored in a structure.",
      "folder": "STM_System_Time_1_KIT_TC297_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "STM",
        "STM_System_Time_1",
        "System timer",
        "Time"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_System_Time_1_KIT_TC297_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "System time via STM",
      "name": "STM_System_Time_1_KIT_TC334_LK",
      "description": "The System Timer (STM) module counts the number of ticks since the last Application Reset.\r\nThis number is used to calculate the current system time in days, hours, minutes and seconds.",
      "abstract": "The STM module is used to get the current system time (days:hours:minutes:seconds). The time is stored in a structure.",
      "folder": "STM_System_Time_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "STM",
        "STM_System_Time_1",
        "System timer",
        "Time"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_System_Time_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "System time via STM",
      "name": "STM_System_Time_1_KIT_TC375_LK",
      "description": "The System Timer (STM) module counts the number of ticks since the last Application Reset.\r\nThis number is used to calculate the current system time in days, hours, minutes and seconds.",
      "abstract": "The STM module is used to get the current system time (days:hours:minutes:seconds). The time is stored in a structure.",
      "folder": "STM_System_Time_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "STM",
        "STM_System_Time_1",
        "System timer",
        "Time"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_System_Time_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "System time via STM",
      "name": "STM_System_Time_1_KIT_TC397_TFT",
      "description": "The System Timer (STM) module counts the number of ticks since the last Application Reset.\r\nThis number is used to calculate the current system time in day, hours, minutes and seconds.",
      "abstract": "The STM module is used to get the current system time (days:hours:minutes:seconds). The time is stored in a structure.",
      "folder": "STM_System_Time_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "STM",
        "STM_System_Time_1",
        "System timer",
        "Time"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_STM_System_Time_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "UART data transfer via DMA",
      "name": "UART_DMA_Transfer_1_KIT_TC275_LK",
      "description": "The CPU sends a message via UART in loopback mode. When it receives the message back,\r\nit triggers an interrupt which starts the data transfer via DMA.",
      "abstract": "The DMA module is used to transfer data received from the UART to LMURAM.",
      "folder": "UART_DMA_Transfer_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "AURIX",
        "DMA",
        "UART",
        "UART_DMA_Transfer_1",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_DMA_Transfer_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "UART data transfer via DMA",
      "name": "UART_DMA_Transfer_1_KIT_TC297_TFT",
      "description": "The CPU sends a message via UART in loopback mode. When it receives the message back,\r\nit triggers an interrupt which starts the data transfer via DMA.",
      "abstract": "The DMA module is used to transfer data received from the UART to LMURAM.",
      "folder": "UART_DMA_Transfer_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "AURIX",
        "DMA",
        "UART",
        "UART_DMA_Transfer_1",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_DMA_Transfer_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "UART data transfer via DMA",
      "name": "UART_DMA_Transfer_1_KIT_TC334_LK",
      "description": "The CPU sends a message via UART in loopback mode. When it receives the message back,\r\nit triggers an interrupt which starts the data transfer via DMA.",
      "abstract": "The DMA module is used to transfer data received from the UART to Distributed Local Memory Unit (DLMU) RAM of CPU0.",
      "folder": "UART_DMA_Transfer_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "AURIX",
        "DMA",
        "UART",
        "UART_DMA_Transfer_1",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_DMA_Transfer_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "UART data transfer via DMA",
      "name": "UART_DMA_Transfer_1_KIT_TC375_LK",
      "description": "The CPU sends a message via UART in loopback mode. When it receives the message back,\r\nit triggers an interrupt which starts the data transfer via DMA.",
      "abstract": "The DMA module is used to transfer data received from the UART to Distributed Local Memory Unit (DLMU) RAM of CPU0.",
      "folder": "UART_DMA_Transfer_1_KIT_TC375_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "AURIX",
        "DMA",
        "UART",
        "UART_DMA_Transfer_1",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_DMA_Transfer_1_KIT_TC375_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "UART data transfer via DMA",
      "name": "UART_DMA_Transfer_1_KIT_TC397_TFT",
      "description": "The CPU sends a message via UART in loopback mode. When it receives the message back,\r\nit triggers an interrupt which starts the data transfer via DMA.",
      "abstract": "The DMA module is used to transfer data received from the UART to Distributed Local Memory Unit (DLMU) RAM of CPU0.",
      "folder": "UART_DMA_Transfer_1_KIT_TC397_TFT",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "ASC",
        "ASCLIN",
        "AURIX",
        "DMA",
        "UART",
        "UART_DMA_Transfer_1",
        "data transfer"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_DMA_Transfer_1_KIT_TC397_TFT-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-03-22T00:00:00.000Z"
    },
    {
      "title": "UART communication between PC and device",
      "name": "UART_VCOM_1_KIT_TC275_LK",
      "description": "The string \"Hello World!\" is sent from the device to the PC via UART.\r\nThe string is then visualized in a serial monitor.",
      "abstract": "UART communication via ASCLIN is used to send \"Hello World!\" from the device to the computer.",
      "folder": "UART_VCOM_1_KIT_TC275_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "COM",
        "PC",
        "UART",
        "UART_VCOM_1",
        "VCOM",
        "communication",
        "serial",
        "virtual COM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_VCOM_1_KIT_TC275_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "UART communication between PC and device",
      "name": "UART_VCOM_1_KIT_TC297_TFT",
      "description": "The string \"Hello World!\" is sent from the device to the PC via UART.\r\nThe string is then visualized in a serial monitor.",
      "abstract": "UART communication via ASCLIN is used to send \"Hello World!\" from the device to the computer.",
      "folder": "UART_VCOM_1_KIT_TC297_TFT",
      "version": "V1.0.5",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "COM",
        "PC",
        "UART",
        "UART_VCOM_1",
        "VCOM",
        "communication",
        "serial",
        "virtual COM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_VCOM_1_KIT_TC297_TFT-TR-v01_00_05-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "UART communication between PC and device",
      "name": "UART_VCOM_1_KIT_TC334_LK",
      "description": "The string \"Hello World!\" is sent from the device to the PC via UART.\r\nThe string is then visualized in a serial monitor.",
      "abstract": "UART communication via ASCLIN is used to send \"Hello World!\" from the device to the computer.",
      "folder": "UART_VCOM_1_KIT_TC334_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "COM",
        "PC",
        "UART",
        "UART_VCOM_1",
        "VCOM",
        "communication",
        "serial",
        "virtual COM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_VCOM_1_KIT_TC334_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "UART communication between PC and device",
      "name": "UART_VCOM_1_KIT_TC375_LK",
      "description": "The string \"Hello World!\" is sent from the device to the PC via UART.\r\nThe string is then visualized in a serial monitor.",
      "abstract": "UART communication via ASCLIN is used to send \"Hello World!\" from the device to the computer.",
      "folder": "UART_VCOM_1_KIT_TC375_LK",
      "version": "V1.0.2",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "COM",
        "PC",
        "UART",
        "UART_VCOM_1",
        "VCOM",
        "communication",
        "serial",
        "virtual COM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_VCOM_1_KIT_TC375_LK-TR-v01_00_02-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "UART communication between PC and device",
      "name": "UART_VCOM_1_KIT_TC397_TFT",
      "description": "The string \"Hello World!\" is sent from the device to the PC via UART.\r\nThe string is then visualized in a serial monitor.",
      "abstract": "UART communication via ASCLIN is used to send \"Hello World!\" from the device to the computer.",
      "folder": "UART_VCOM_1_KIT_TC397_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "COM",
        "PC",
        "UART",
        "UART_VCOM_1",
        "VCOM",
        "communication",
        "serial",
        "virtual COM"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_UART_VCOM_1_KIT_TC397_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2022-06-30T00:00:00.000Z"
    },
    {
      "title": "Watchdog configuration",
      "name": "Watchdog_1_KIT_TC275_LK",
      "description": "This example is showing how to service the WDT periodically.",
      "abstract": "The watchdog is serviced in order to prevent a reset.",
      "folder": "Watchdog_1_KIT_TC275_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC275 lite Kit",
          "id": "KIT_AURIX_TC275_LITE",
          "device_id": "TC27xTP_D-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "WDT",
        "Watchdog_1",
        "system control unit",
        "timer",
        "watchdog"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Watchdog_1_KIT_TC275_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC27D_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Watchdog configuration",
      "name": "Watchdog_1_KIT_TC297_TFT",
      "description": "This example is showing how to service the WDT periodically.",
      "abstract": "The watchdog is serviced in order to prevent a reset.",
      "folder": "Watchdog_1_KIT_TC297_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC2X7 V1.1",
          "id": "KIT_AURIX_TC297_TFT_BC-Step",
          "device_id": "TC29xTA/TX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "WDT",
        "Watchdog_1",
        "system control unit",
        "timer",
        "watchdog"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Watchdog_1_KIT_TC297_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC29B_iLLD_UM_1_0_1_12_0.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Watchdog configuration",
      "name": "Watchdog_1_KIT_TC334_LK",
      "description": "This example is showing how to service the WatchDog Timer (WDT) periodically.",
      "abstract": "The watchdog is serviced in order to prevent a reset.",
      "folder": "Watchdog_1_KIT_TC334_LK",
      "version": "V1.0.0",
      "platforms": [
        {
          "name": "AURIX TC334 lite Kit",
          "id": "KIT_A2G_TC334_LITE",
          "device_id": "TC33xLP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "WDT",
        "Watchdog_1",
        "system control unit",
        "timer",
        "watchdog"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Watchdog_1_KIT_TC334_LK-TR-v01_00_00-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC33A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-12-16T00:00:00.000Z"
    },
    {
      "title": "Watchdog configuration",
      "name": "Watchdog_1_KIT_TC375_LK",
      "description": "This example is showing how to service the WatchDog Timer (WDT) periodically.",
      "abstract": "The watchdog is serviced in order to prevent a reset.",
      "folder": "Watchdog_1_KIT_TC375_LK",
      "version": "V1.0.1",
      "platforms": [
        {
          "name": "AURIX TC375 lite Kit",
          "id": "KIT_A2G_TC375_LITE",
          "device_id": "TC37xTP_A-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "WDT",
        "Watchdog_1",
        "system control unit",
        "timer",
        "watchdog"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Watchdog_1_KIT_TC375_LK-TR-v01_00_01-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC37A_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    },
    {
      "title": "Watchdog configuration",
      "name": "Watchdog_1_KIT_TC397_TFT",
      "description": "This example is showing how to service the WatchDog Timer (WDT) periodically.",
      "abstract": "The watchdog is serviced in order to prevent a reset.",
      "folder": "Watchdog_1_KIT_TC397_TFT",
      "version": "V1.0.3",
      "platforms": [
        {
          "name": "APPLICATION KIT TC3X7 V2.0",
          "id": "KIT_A2G_TC397_5V_TFT",
          "device_id": "TC39xXX_B-Step"
        }
      ],
      "keywords": [
        "AURIX",
        "SCU",
        "WDT",
        "Watchdog_1",
        "system control unit",
        "timer",
        "watchdog"
      ],
      "documents": [
        "https://www.infineon.com/aurix-expert-training/Infineon-AURIX_Watchdog_1_KIT_TC397_TFT-TR-v01_00_03-EN.pdf",
        "https://www.infineon.com/aurix-expert-training/TC39B_iLLD_UM_1_0_1_12_1.chm"
      ],
      "lastModified": "2021-06-29T00:00:00.000Z"
    }
  ]
}